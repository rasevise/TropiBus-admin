"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var bodyParser = require("body-parser");
var path = require("path");
var compression = require("compression");
var routes = require("./routes");
var pg_1 = require("./db/pg");
var _clientDir = '../../client/dev';
var app = express();
function init(port, mode) {
    app.use(bodyParser.urlencoded({ extended: false }));
    app.use(bodyParser.json());
    app.use(bodyParser.text());
    app.use(compression());
    pg_1.Init();
    if (mode == 'dev') {
        app.use('/*', function (req, res, next) {
            res.header('Access-Control-Allow-Origin', '*');
            res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
            res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
            next();
        });
        routes.init(app);
        var root = path.resolve(process.cwd());
        var clientRoot = path.resolve(process.cwd(), './dist/client/dev');
        app.use(express.static(root));
        app.use(express.static(clientRoot));
        var renderIndex = function (req, res) {
            res.sendFile(path.resolve(__dirname, _clientDir + '/index.html'));
        };
        app.get('/*', renderIndex);
    }
    else {
        routes.init(app);
        _clientDir = '../../client/prod';
        app.use('/js', express.static(path.resolve(__dirname, _clientDir + '/js')));
        app.use('/css', express.static(path.resolve(__dirname, _clientDir + '/css')));
        app.use('/assets', express.static(path.resolve(__dirname, _clientDir + '/assets')));
        var renderIndex = function (req, res) {
            res.sendFile(path.resolve(__dirname, _clientDir + '/index.html'));
        };
        app.get('/*', renderIndex);
    }
    return new Promise(function (resolve, reject) {
        var server = app.listen(port, function () {
            var port = server.address().port;
            console.log('App is listening on port:' + port);
            resolve(server);
        });
    });
}
exports.init = init;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QztRQU9wRixJQUFJLFdBQVcsR0FBRyxVQUFVLEdBQW9CLEVBQUUsR0FBcUI7WUFDckUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxVQUFVLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUNwRSxDQUFDLENBQUM7UUFLRixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBS0QsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFjLFVBQUMsT0FBTyxFQUFFLE1BQU07UUFDOUMsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7WUFDNUIsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQztZQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixHQUFHLElBQUksQ0FBQyxDQUFDO1lBQ2hELE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQXhGRCxvQkF3RkM7QUFBQSxDQUFDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaHR0cCBmcm9tICdodHRwJztcbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgKiBhcyBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBjb21wcmVzc2lvbiBmcm9tICdjb21wcmVzc2lvbic7XG5pbXBvcnQgKiBhcyByb3V0ZXMgZnJvbSAnLi9yb3V0ZXMnO1xuaW1wb3J0ICogYXMgY29ycyBmcm9tICdjb3JzJztcblxuaW1wb3J0IHsgSW5pdCB9IGZyb20gJy4vZGIvcGcnO1xuXG4vKipcbiAqIENsaWVudCBEaXJcbiAqIEBub3RlIGBkZXZgIGRlZmF1bHQuXG4gKi9cbnZhciBfY2xpZW50RGlyID0gJy4uLy4uL2NsaWVudC9kZXYnO1xudmFyIGFwcCA9IGV4cHJlc3MoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQocG9ydDogbnVtYmVyLCBtb2RlOiBzdHJpbmcpIHtcblxuICBhcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiBmYWxzZSB9KSk7XG4gIGFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuICBhcHAudXNlKGJvZHlQYXJzZXIudGV4dCgpKTtcbiAgYXBwLnVzZShjb21wcmVzc2lvbigpKTtcbiAgLy8gYXBwLnVzZShjb3JzKCkpO1xuXG4gIC8vIERCIEluaXRcbiAgSW5pdCgpO1xuXG4gIC8qKlxuICAgKiBEZXYgTW9kZS5cbiAgICogQG5vdGUgRGV2IHNlcnZlciB3aWxsIG9ubHkgZ2l2ZSBmb3IgeW91IG1pZGRsZXdhcmUuXG4gICAqL1xuICBpZiAobW9kZSA9PSAnZGV2Jykge1xuXG4gICAgYXBwLnVzZSgnLyonLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICAgICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTtcbiAgICAgIHJlcy5oZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnMnLCAnT3JpZ2luLCBYLVJlcXVlc3RlZC1XaXRoLCBDb250ZW50LVR5cGUsIEFjY2VwdCcpO1xuICAgICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcycsICdHRVQsIFBPU1QsIE9QVElPTlMsIFBVVCwgUEFUQ0gsIERFTEVURScpO1xuICAgICAgbmV4dCgpO1xuICAgIH0pO1xuXG4gICAgcm91dGVzLmluaXQoYXBwKTtcblxuICAgIGxldCByb290ID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCkpO1xuICAgIGxldCBjbGllbnRSb290ID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksICcuL2Rpc3QvY2xpZW50L2RldicpO1xuICAgIGFwcC51c2UoZXhwcmVzcy5zdGF0aWMocm9vdCkpO1xuICAgIGFwcC51c2UoZXhwcmVzcy5zdGF0aWMoY2xpZW50Um9vdCkpO1xuXG4gICAgdmFyIHJlbmRlckluZGV4ID0gKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UpID0+IHtcbiAgICAgIHJlcy5zZW5kRmlsZShwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBfY2xpZW50RGlyICsgJy9pbmRleC5odG1sJykpO1xuICAgIH07XG4gICAgYXBwLmdldCgnLyonLCByZW5kZXJJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBBcGkgUm91dGVzIGZvciBgRGV2ZWxvcG1lbnRgLlxuICAgICAqL1xuICB9XG4gIGVsc2Uge1xuICAgIC8qKlxuICAgICAqIFByb2QgTW9kZS5cbiAgICAgKiBAbm90ZSBQcm9kIG1vZCB3aWxsIGdpdmUgeW91IHN0YXRpYyArIG1pZGRsZXdhcmUuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBcGkgUm91dGVzIGZvciBgUHJvZHVjdGlvbmAuXG4gICAgICovXG4gICAgcm91dGVzLmluaXQoYXBwKTtcblxuICAgIC8qKlxuICAgICAqIENsaWVudCBEaXJcbiAgICAgKi9cbiAgICBfY2xpZW50RGlyID0gJy4uLy4uL2NsaWVudC9wcm9kJztcblxuICAgIC8qKlxuICAgICAqIFN0YXRpYy5cbiAgICAgKi9cbiAgICBhcHAudXNlKCcvanMnLCBleHByZXNzLnN0YXRpYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBfY2xpZW50RGlyICsgJy9qcycpKSk7XG4gICAgYXBwLnVzZSgnL2NzcycsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIF9jbGllbnREaXIgKyAnL2NzcycpKSk7XG4gICAgYXBwLnVzZSgnL2Fzc2V0cycsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIF9jbGllbnREaXIgKyAnL2Fzc2V0cycpKSk7XG5cbiAgICAvKipcbiAgICAgKiBTcGEgUmVzIFNlbmRlci5cbiAgICAgKiBAcGFyYW0gcmVxIHthbnl9XG4gICAgICogQHBhcmFtIHJlcyB7YW55fVxuICAgICAqL1xuICAgIHZhciByZW5kZXJJbmRleCA9IGZ1bmN0aW9uIChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlKSB7XG4gICAgICByZXMuc2VuZEZpbGUocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgX2NsaWVudERpciArICcvaW5kZXguaHRtbCcpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUHJldmVudCBzZXJ2ZXIgcm91dGluZyBhbmQgdXNlIEBuZzItcm91dGVyLlxuICAgICAqL1xuICAgIGFwcC5nZXQoJy8qJywgcmVuZGVySW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlcnZlciB3aXRoIGd6aXAgY29tcHJlc3Npb24uXG4gICAqL1xuICByZXR1cm4gbmV3IFByb21pc2U8aHR0cC5TZXJ2ZXI+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgc2VydmVyID0gYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG4gICAgICB2YXIgcG9ydCA9IHNlcnZlci5hZGRyZXNzKCkucG9ydDtcbiAgICAgIGNvbnNvbGUubG9nKCdBcHAgaXMgbGlzdGVuaW5nIG9uIHBvcnQ6JyArIHBvcnQpO1xuICAgICAgcmVzb2x2ZShzZXJ2ZXIpO1xuICAgIH0pO1xuICB9KTtcbn07XG4iXX0=
