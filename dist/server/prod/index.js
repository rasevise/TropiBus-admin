"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var bodyParser = require("body-parser");
var path = require("path");
var compression = require("compression");
var routes = require("./routes");
var pg_1 = require("./db/pg");
var _clientDir = '../../client/dev';
var app = express();
function init(port, mode) {
    var usePort = process.env.PORT || port;
    app.use(bodyParser.urlencoded({ extended: false }));
    app.use(bodyParser.json());
    app.use(bodyParser.text());
    app.use(compression());
    pg_1.Init();
    if (mode === 'dev') {
        app.use('/*', function (req, res, next) {
            res.header('Access-Control-Allow-Origin', '*');
            res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
            res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
            next();
        });
        routes.init(app);
        var root = path.resolve(process.cwd());
        var clientRoot = path.resolve(process.cwd(), './dist/client/dev');
        app.use(express.static(root));
        app.use(express.static(clientRoot));
        var renderIndex = function (req, res) {
            res.sendFile(path.resolve(__dirname, _clientDir + '/index.html'));
        };
        app.get('/*', renderIndex);
        app.listen(port, function (err) {
            if (err) {
                return console.log('something bad happened', err);
            }
            console.log("server is listening on " + port);
        });
    }
    else {
        routes.init(app);
        _clientDir = '../../client/prod';
        app.use('/js', express.static(path.resolve(__dirname, _clientDir + '/js')));
        app.use('/css', express.static(path.resolve(__dirname, _clientDir + '/css')));
        app.use('/assets', express.static(path.resolve(__dirname, _clientDir + '/assets')));
        var renderIndex_1 = function (req, res) {
            res.sendFile(path.resolve(__dirname, _clientDir + '/index.html'));
        };
        app.get('/*', renderIndex_1);
        app.listen(usePort, function (err) {
            if (err) {
                return console.log('something bad happened', err);
            }
            console.log("server is listening on " + usePort);
        });
    }
}
exports.init = init;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLFNBQVMsRUFBRSxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVFLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBVSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5RSxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFPcEYsSUFBSSxhQUFXLEdBQUcsVUFBVSxHQUFvQixFQUFFLEdBQXFCO1lBQ3JFLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBVSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDcEUsQ0FBQyxDQUFDO1FBS0YsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsYUFBVyxDQUFDLENBQUM7UUFFM0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsVUFBQyxHQUFPO1lBQzFCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ1IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDcEQsQ0FBQztZQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTBCLE9BQVMsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztBQWFILENBQUM7QUExR0Qsb0JBMEdDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaHR0cCBmcm9tICdodHRwJztcclxuaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcclxuaW1wb3J0ICogYXMgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XHJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCAqIGFzIGNvbXByZXNzaW9uIGZyb20gJ2NvbXByZXNzaW9uJztcclxuaW1wb3J0ICogYXMgcm91dGVzIGZyb20gJy4vcm91dGVzJztcclxuaW1wb3J0ICogYXMgY29ycyBmcm9tICdjb3JzJztcclxuXHJcbmltcG9ydCB7IEluaXQgfSBmcm9tICcuL2RiL3BnJztcclxuXHJcbi8qKlxyXG4gKiBDbGllbnQgRGlyXHJcbiAqIEBub3RlIGBkZXZgIGRlZmF1bHQuXHJcbiAqL1xyXG52YXIgX2NsaWVudERpciA9ICcuLi8uLi9jbGllbnQvZGV2JztcclxudmFyIGFwcCA9IGV4cHJlc3MoKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0KHBvcnQ6IG51bWJlciwgbW9kZTogc3RyaW5nKSB7XHJcblxyXG4gIHZhciB1c2VQb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCBwb3J0O1xyXG5cclxuICBhcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiBmYWxzZSB9KSk7XHJcbiAgYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XHJcbiAgYXBwLnVzZShib2R5UGFyc2VyLnRleHQoKSk7XHJcbiAgYXBwLnVzZShjb21wcmVzc2lvbigpKTtcclxuICAvLyBhcHAudXNlKGNvcnMoKSk7XHJcblxyXG4gIC8vIERCIEluaXRcclxuICBJbml0KCk7XHJcblxyXG4gIC8qKlxyXG4gICAqIERldiBNb2RlLlxyXG4gICAqIEBub3RlIERldiBzZXJ2ZXIgd2lsbCBvbmx5IGdpdmUgZm9yIHlvdSBtaWRkbGV3YXJlLlxyXG4gICAqL1xyXG4gIGlmIChtb2RlID09PSAnZGV2Jykge1xyXG5cclxuICAgIGFwcC51c2UoJy8qJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcclxuICAgICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTtcclxuICAgICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycycsICdPcmlnaW4sIFgtUmVxdWVzdGVkLVdpdGgsIENvbnRlbnQtVHlwZSwgQWNjZXB0Jyk7XHJcbiAgICAgIHJlcy5oZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHMnLCAnR0VULCBQT1NULCBPUFRJT05TLCBQVVQsIFBBVENILCBERUxFVEUnKTtcclxuICAgICAgbmV4dCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcm91dGVzLmluaXQoYXBwKTtcclxuXHJcbiAgICBsZXQgcm9vdCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpKTtcclxuICAgIGxldCBjbGllbnRSb290ID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksICcuL2Rpc3QvY2xpZW50L2RldicpO1xyXG4gICAgYXBwLnVzZShleHByZXNzLnN0YXRpYyhyb290KSk7XHJcbiAgICBhcHAudXNlKGV4cHJlc3Muc3RhdGljKGNsaWVudFJvb3QpKTtcclxuXHJcbiAgICB2YXIgcmVuZGVySW5kZXggPSAocmVxOiBleHByZXNzLlJlcXVlc3QsIHJlczogZXhwcmVzcy5SZXNwb25zZSkgPT4ge1xyXG4gICAgICByZXMuc2VuZEZpbGUocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgX2NsaWVudERpciArICcvaW5kZXguaHRtbCcpKTtcclxuICAgIH07XHJcbiAgICBhcHAuZ2V0KCcvKicsIHJlbmRlckluZGV4KTtcclxuXHJcbiAgICBhcHAubGlzdGVuKHBvcnQsIChlcnI6YW55KSA9PiB7XHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICByZXR1cm4gY29uc29sZS5sb2coJ3NvbWV0aGluZyBiYWQgaGFwcGVuZWQnLCBlcnIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zb2xlLmxvZyhgc2VydmVyIGlzIGxpc3RlbmluZyBvbiAke3BvcnR9YCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwaSBSb3V0ZXMgZm9yIGBEZXZlbG9wbWVudGAuXHJcbiAgICAgKi9cclxuICB9ZWxzZSB7XHJcbiAgICAvKipcclxuICAgICAqIFByb2QgTW9kZS5cclxuICAgICAqIEBub3RlIFByb2QgbW9kIHdpbGwgZ2l2ZSB5b3Ugc3RhdGljICsgbWlkZGxld2FyZS5cclxuICAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBpIFJvdXRlcyBmb3IgYFByb2R1Y3Rpb25gLlxyXG4gICAgICovXHJcbiAgICByb3V0ZXMuaW5pdChhcHApO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xpZW50IERpclxyXG4gICAgICovXHJcbiAgICBfY2xpZW50RGlyID0gJy4uLy4uL2NsaWVudC9wcm9kJztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN0YXRpYy5cclxuICAgICAqL1xyXG4gICAgYXBwLnVzZSgnL2pzJywgZXhwcmVzcy5zdGF0aWMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgX2NsaWVudERpciArICcvanMnKSkpO1xyXG4gICAgYXBwLnVzZSgnL2NzcycsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIF9jbGllbnREaXIgKyAnL2NzcycpKSk7XHJcbiAgICBhcHAudXNlKCcvYXNzZXRzJywgZXhwcmVzcy5zdGF0aWMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgX2NsaWVudERpciArICcvYXNzZXRzJykpKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNwYSBSZXMgU2VuZGVyLlxyXG4gICAgICogQHBhcmFtIHJlcSB7YW55fVxyXG4gICAgICogQHBhcmFtIHJlcyB7YW55fVxyXG4gICAgICovXHJcbiAgICBsZXQgcmVuZGVySW5kZXggPSBmdW5jdGlvbiAocmVxOiBleHByZXNzLlJlcXVlc3QsIHJlczogZXhwcmVzcy5SZXNwb25zZSkge1xyXG4gICAgICByZXMuc2VuZEZpbGUocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgX2NsaWVudERpciArICcvaW5kZXguaHRtbCcpKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcmV2ZW50IHNlcnZlciByb3V0aW5nIGFuZCB1c2UgQG5nMi1yb3V0ZXIuXHJcbiAgICAgKi9cclxuICAgIGFwcC5nZXQoJy8qJywgcmVuZGVySW5kZXgpO1xyXG5cclxuICAgIGFwcC5saXN0ZW4odXNlUG9ydCwgKGVycjphbnkpID0+IHtcclxuICAgICAgaWYgKGVycikge1xyXG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZygnc29tZXRoaW5nIGJhZCBoYXBwZW5lZCcsIGVycik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKGBzZXJ2ZXIgaXMgbGlzdGVuaW5nIG9uICR7dXNlUG9ydH1gKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIFNlcnZlciB3aXRoIGd6aXAgY29tcHJlc3Npb24uXHJcbiAgICovXHJcbiAgLy8gcmV0dXJuIG5ldyBQcm9taXNlPGh0dHAuU2VydmVyPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgLy8gICBsZXQgc2VydmVyID0gYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XHJcbiAgLy8gICAgIHZhciBwb3J0ID0gc2VydmVyLmFkZHJlc3MoKS5wb3J0O1xyXG4gIC8vICAgICBjb25zb2xlLmxvZygnQXBwIGlzIGxpc3RlbmluZyBvbiBwb3J0OicgKyBwb3J0KTtcclxuICAvLyAgICAgcmVzb2x2ZShzZXJ2ZXIpO1xyXG4gIC8vICAgfSk7XHJcbiAgLy8gfSk7XHJcbn1cclxuIl19
