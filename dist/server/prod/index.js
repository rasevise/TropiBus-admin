"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var bodyParser = require("body-parser");
var path = require("path");
var compression = require("compression");
var routes = require("./routes");
var pg_1 = require("./db/pg");
var _clientDir = '../../client/dev';
var app = express();
function init(port, mode) {
    var usePort = process.env.PORT || port;
    app.use(bodyParser.urlencoded({ extended: false }));
    app.use(bodyParser.json());
    app.use(bodyParser.text());
    app.use(compression());
    pg_1.Init();
    if (mode === 'dev') {
        app.use('/*', function (req, res, next) {
            res.header('Access-Control-Allow-Origin', '*');
            res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
            res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
            next();
        });
        routes.init(app);
        var root = path.resolve(process.cwd());
        var clientRoot = path.resolve(process.cwd(), './dist/client/dev');
        app.use(express.static(root));
        app.use(express.static(clientRoot));
        var renderIndex = function (req, res) {
            res.sendFile(path.resolve(__dirname, _clientDir + '/index.html'));
        };
        app.get('/*', renderIndex);
        app.listen(port, function (err) {
            if (err) {
                return console.log('something bad happened', err);
            }
            console.log("server is listening on " + port);
        });
    }
    else {
        routes.init(app);
        _clientDir = '../../client/prod';
        app.use('/js', express.static(path.resolve(__dirname, _clientDir + '/js')));
        app.use('/css', express.static(path.resolve(__dirname, _clientDir + '/css')));
        app.use('/assets', express.static(path.resolve(__dirname, _clientDir + '/assets')));
        var renderIndex_1 = function (req, res) {
            res.sendFile(path.resolve(__dirname, _clientDir + '/index.html'));
        };
        app.get('/*', renderIndex_1);
        app.listen(usePort, function (err) {
            if (err) {
                return console.log('something bad happened', err);
            }
            console.log("server is listening on " + usePort);
        });
    }
}
exports.init = init;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLFNBQVMsRUFBRSxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVFLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBVSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5RSxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFPcEYsSUFBSSxhQUFXLEdBQUcsVUFBVSxHQUFvQixFQUFFLEdBQXFCO1lBQ3JFLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBVSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDcEUsQ0FBQyxDQUFDO1FBS0YsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsYUFBVyxDQUFDLENBQUM7UUFFM0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsVUFBQyxHQUFPO1lBQzFCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ1IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDcEQsQ0FBQztZQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTBCLE9BQVMsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztBQWFILENBQUM7QUExR0Qsb0JBMEdDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaHR0cCBmcm9tICdodHRwJztcbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgKiBhcyBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBjb21wcmVzc2lvbiBmcm9tICdjb21wcmVzc2lvbic7XG5pbXBvcnQgKiBhcyByb3V0ZXMgZnJvbSAnLi9yb3V0ZXMnO1xuaW1wb3J0ICogYXMgY29ycyBmcm9tICdjb3JzJztcblxuaW1wb3J0IHsgSW5pdCB9IGZyb20gJy4vZGIvcGcnO1xuXG4vKipcbiAqIENsaWVudCBEaXJcbiAqIEBub3RlIGBkZXZgIGRlZmF1bHQuXG4gKi9cbnZhciBfY2xpZW50RGlyID0gJy4uLy4uL2NsaWVudC9kZXYnO1xudmFyIGFwcCA9IGV4cHJlc3MoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQocG9ydDogbnVtYmVyLCBtb2RlOiBzdHJpbmcpIHtcblxuICB2YXIgdXNlUG9ydCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgcG9ydDtcblxuICBhcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiBmYWxzZSB9KSk7XG4gIGFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuICBhcHAudXNlKGJvZHlQYXJzZXIudGV4dCgpKTtcbiAgYXBwLnVzZShjb21wcmVzc2lvbigpKTtcbiAgLy8gYXBwLnVzZShjb3JzKCkpO1xuXG4gIC8vIERCIEluaXRcbiAgSW5pdCgpO1xuXG4gIC8qKlxuICAgKiBEZXYgTW9kZS5cbiAgICogQG5vdGUgRGV2IHNlcnZlciB3aWxsIG9ubHkgZ2l2ZSBmb3IgeW91IG1pZGRsZXdhcmUuXG4gICAqL1xuICBpZiAobW9kZSA9PT0gJ2RldicpIHtcblxuICAgIGFwcC51c2UoJy8qJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgICAgIHJlcy5oZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsICcqJyk7XG4gICAgICByZXMuaGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJywgJ09yaWdpbiwgWC1SZXF1ZXN0ZWQtV2l0aCwgQ29udGVudC1UeXBlLCBBY2NlcHQnKTtcbiAgICAgIHJlcy5oZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHMnLCAnR0VULCBQT1NULCBPUFRJT05TLCBQVVQsIFBBVENILCBERUxFVEUnKTtcbiAgICAgIG5leHQoKTtcbiAgICB9KTtcblxuICAgIHJvdXRlcy5pbml0KGFwcCk7XG5cbiAgICBsZXQgcm9vdCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpKTtcbiAgICBsZXQgY2xpZW50Um9vdCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnLi9kaXN0L2NsaWVudC9kZXYnKTtcbiAgICBhcHAudXNlKGV4cHJlc3Muc3RhdGljKHJvb3QpKTtcbiAgICBhcHAudXNlKGV4cHJlc3Muc3RhdGljKGNsaWVudFJvb3QpKTtcblxuICAgIHZhciByZW5kZXJJbmRleCA9IChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlKSA9PiB7XG4gICAgICByZXMuc2VuZEZpbGUocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgX2NsaWVudERpciArICcvaW5kZXguaHRtbCcpKTtcbiAgICB9O1xuICAgIGFwcC5nZXQoJy8qJywgcmVuZGVySW5kZXgpO1xuXG4gICAgYXBwLmxpc3Rlbihwb3J0LCAoZXJyOmFueSkgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gY29uc29sZS5sb2coJ3NvbWV0aGluZyBiYWQgaGFwcGVuZWQnLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBjb25zb2xlLmxvZyhgc2VydmVyIGlzIGxpc3RlbmluZyBvbiAke3BvcnR9YCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBcGkgUm91dGVzIGZvciBgRGV2ZWxvcG1lbnRgLlxuICAgICAqL1xuICB9ZWxzZSB7XG4gICAgLyoqXG4gICAgICogUHJvZCBNb2RlLlxuICAgICAqIEBub3RlIFByb2QgbW9kIHdpbGwgZ2l2ZSB5b3Ugc3RhdGljICsgbWlkZGxld2FyZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFwaSBSb3V0ZXMgZm9yIGBQcm9kdWN0aW9uYC5cbiAgICAgKi9cbiAgICByb3V0ZXMuaW5pdChhcHApO1xuXG4gICAgLyoqXG4gICAgICogQ2xpZW50IERpclxuICAgICAqL1xuICAgIF9jbGllbnREaXIgPSAnLi4vLi4vY2xpZW50L3Byb2QnO1xuXG4gICAgLyoqXG4gICAgICogU3RhdGljLlxuICAgICAqL1xuICAgIGFwcC51c2UoJy9qcycsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIF9jbGllbnREaXIgKyAnL2pzJykpKTtcbiAgICBhcHAudXNlKCcvY3NzJywgZXhwcmVzcy5zdGF0aWMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgX2NsaWVudERpciArICcvY3NzJykpKTtcbiAgICBhcHAudXNlKCcvYXNzZXRzJywgZXhwcmVzcy5zdGF0aWMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgX2NsaWVudERpciArICcvYXNzZXRzJykpKTtcblxuICAgIC8qKlxuICAgICAqIFNwYSBSZXMgU2VuZGVyLlxuICAgICAqIEBwYXJhbSByZXEge2FueX1cbiAgICAgKiBAcGFyYW0gcmVzIHthbnl9XG4gICAgICovXG4gICAgbGV0IHJlbmRlckluZGV4ID0gZnVuY3Rpb24gKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UpIHtcbiAgICAgIHJlcy5zZW5kRmlsZShwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBfY2xpZW50RGlyICsgJy9pbmRleC5odG1sJykpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQcmV2ZW50IHNlcnZlciByb3V0aW5nIGFuZCB1c2UgQG5nMi1yb3V0ZXIuXG4gICAgICovXG4gICAgYXBwLmdldCgnLyonLCByZW5kZXJJbmRleCk7XG5cbiAgICBhcHAubGlzdGVuKHVzZVBvcnQsIChlcnI6YW55KSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZygnc29tZXRoaW5nIGJhZCBoYXBwZW5lZCcsIGVycik7XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKGBzZXJ2ZXIgaXMgbGlzdGVuaW5nIG9uICR7dXNlUG9ydH1gKTtcbiAgICB9KTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFNlcnZlciB3aXRoIGd6aXAgY29tcHJlc3Npb24uXG4gICAqL1xuICAvLyByZXR1cm4gbmV3IFByb21pc2U8aHR0cC5TZXJ2ZXI+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgLy8gICBsZXQgc2VydmVyID0gYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG4gIC8vICAgICB2YXIgcG9ydCA9IHNlcnZlci5hZGRyZXNzKCkucG9ydDtcbiAgLy8gICAgIGNvbnNvbGUubG9nKCdBcHAgaXMgbGlzdGVuaW5nIG9uIHBvcnQ6JyArIHBvcnQpO1xuICAvLyAgICAgcmVzb2x2ZShzZXJ2ZXIpO1xuICAvLyAgIH0pO1xuICAvLyB9KTtcbn1cbiJdfQ==
