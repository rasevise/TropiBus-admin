"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var bodyParser = require("body-parser");
var path = require("path");
var compression = require("compression");
var routes = require("./routes");
var cors = require("cors");
var pg_1 = require("./db/pg");
var _clientDir = '../../client/dev';
var app = express();
function init(port, mode) {
    var usePort = process.env.PORT || port;
    app.use(bodyParser.urlencoded({ extended: false }));
    app.use(bodyParser.json());
    app.use(bodyParser.text());
    app.use(compression());
    app.use(cors());
    pg_1.Init();
    if (mode === 'dev') {
        app.use('/*', function (req, res, next) {
            res.header('Access-Control-Allow-Origin', '*');
            res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
            res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
            next();
        });
        routes.init(app);
        var root = path.resolve(process.cwd());
        var clientRoot = path.resolve(process.cwd(), './dist/client/dev');
        app.use(express.static(root));
        app.use(express.static(clientRoot));
        var renderIndex = function (req, res) {
            res.sendFile(path.resolve(__dirname, _clientDir + '/index.html'));
        };
        app.get('/*', renderIndex);
        app.listen(port, function (err) {
            if (err) {
                return console.log('something bad happened', err);
            }
            console.log("server is listening on " + port);
        });
    }
    else {
        routes.init(app);
        _clientDir = '../../client/prod';
        app.use('/js', express.static(path.resolve(__dirname, _clientDir + '/js')));
        app.use('/css', express.static(path.resolve(__dirname, _clientDir + '/css')));
        app.use('/assets', express.static(path.resolve(__dirname, _clientDir + '/assets')));
        var renderIndex_1 = function (req, res) {
            res.sendFile(path.resolve(__dirname, _clientDir + '/index.html'));
        };
        app.get('/*', renderIndex_1);
        app.listen(usePort, function (err) {
            if (err) {
                return console.log('something bad happened', err);
            }
            console.log("server is listening on " + usePort);
        });
    }
}
exports.init = init;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
