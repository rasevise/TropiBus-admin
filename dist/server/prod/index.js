"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var bodyParser = require("body-parser");
var path = require("path");
var compression = require("compression");
var routes = require("./routes");
var cors = require("cors");
var pg_1 = require("./db/pg");
var _clientDir = '../../client/dev';
var app = express();
function init(port, mode) {
    var usePort = process.env.PORT || port;
    app.use(bodyParser.urlencoded({ extended: false }));
    app.use(bodyParser.json());
    app.use(bodyParser.text());
    app.use(compression());
    app.use(cors());
    pg_1.Init();
    if (mode === 'dev') {
        app.use('/*', function (req, res, next) {
            res.header('Access-Control-Allow-Origin', '*');
            res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
            res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
            next();
        });
        routes.init(app);
        var root = path.resolve(process.cwd());
        var clientRoot = path.resolve(process.cwd(), './dist/client/dev');
        app.use(express.static(root));
        app.use(express.static(clientRoot));
        var renderIndex = function (req, res) {
            res.sendFile(path.resolve(__dirname, _clientDir + '/index.html'));
        };
        app.get('/*', renderIndex);
        app.listen(port, function (err) {
            if (err) {
                return console.log('something bad happened', err);
            }
            console.log("server is listening on " + port);
        });
    }
    else {
        routes.init(app);
        _clientDir = '../../client/prod';
        app.use('/js', express.static(path.resolve(__dirname, _clientDir + '/js')));
        app.use('/css', express.static(path.resolve(__dirname, _clientDir + '/css')));
        app.use('/assets', express.static(path.resolve(__dirname, _clientDir + '/assets')));
        var renderIndex_1 = function (req, res) {
            res.sendFile(path.resolve(__dirname, _clientDir + '/index.html'));
        };
        app.get('/*', renderIndex_1);
        app.listen(usePort, function (err) {
            if (err) {
                return console.log('something bad happened', err);
            }
            console.log("server is listening on " + usePort);
        });
    }
}
exports.init = init;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUMsR0FBRyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxVQUFVLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlFLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBVSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQU9wRixJQUFJLGFBQVcsR0FBRyxVQUFVLEdBQW9CLEVBQUUsR0FBcUI7WUFDckUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxVQUFVLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUNwRSxDQUFDLENBQUM7UUFLRixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxhQUFXLENBQUMsQ0FBQztRQUUzQixHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFDLEdBQU87WUFDMUIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDUixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNwRCxDQUFDO1lBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBMEIsT0FBUyxDQUFDLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0FBYUgsQ0FBQztBQTFHRCxvQkEwR0MiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCAqIGFzIGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIGNvbXByZXNzaW9uIGZyb20gJ2NvbXByZXNzaW9uJztcbmltcG9ydCAqIGFzIHJvdXRlcyBmcm9tICcuL3JvdXRlcyc7XG5pbXBvcnQgKiBhcyBjb3JzIGZyb20gJ2NvcnMnO1xuXG5pbXBvcnQgeyBJbml0IH0gZnJvbSAnLi9kYi9wZyc7XG5cbi8qKlxuICogQ2xpZW50IERpclxuICogQG5vdGUgYGRldmAgZGVmYXVsdC5cbiAqL1xudmFyIF9jbGllbnREaXIgPSAnLi4vLi4vY2xpZW50L2Rldic7XG52YXIgYXBwID0gZXhwcmVzcygpO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdChwb3J0OiBudW1iZXIsIG1vZGU6IHN0cmluZykge1xuXG4gIHZhciB1c2VQb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCBwb3J0O1xuXG4gIGFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IGZhbHNlIH0pKTtcbiAgYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG4gIGFwcC51c2UoYm9keVBhcnNlci50ZXh0KCkpO1xuICBhcHAudXNlKGNvbXByZXNzaW9uKCkpO1xuICBhcHAudXNlKGNvcnMoKSk7XG5cbiAgLy8gREIgSW5pdFxuICBJbml0KCk7XG5cbiAgLyoqXG4gICAqIERldiBNb2RlLlxuICAgKiBAbm90ZSBEZXYgc2VydmVyIHdpbGwgb25seSBnaXZlIGZvciB5b3UgbWlkZGxld2FyZS5cbiAgICovXG4gIGlmIChtb2RlID09PSAnZGV2Jykge1xuXG4gICAgYXBwLnVzZSgnLyonLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICAgICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTtcbiAgICAgIHJlcy5oZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnMnLCAnT3JpZ2luLCBYLVJlcXVlc3RlZC1XaXRoLCBDb250ZW50LVR5cGUsIEFjY2VwdCcpO1xuICAgICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcycsICdHRVQsIFBPU1QsIE9QVElPTlMsIFBVVCwgUEFUQ0gsIERFTEVURScpO1xuICAgICAgbmV4dCgpO1xuICAgIH0pO1xuXG4gICAgcm91dGVzLmluaXQoYXBwKTtcblxuICAgIGxldCByb290ID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCkpO1xuICAgIGxldCBjbGllbnRSb290ID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksICcuL2Rpc3QvY2xpZW50L2RldicpO1xuICAgIGFwcC51c2UoZXhwcmVzcy5zdGF0aWMocm9vdCkpO1xuICAgIGFwcC51c2UoZXhwcmVzcy5zdGF0aWMoY2xpZW50Um9vdCkpO1xuXG4gICAgdmFyIHJlbmRlckluZGV4ID0gKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UpID0+IHtcbiAgICAgIHJlcy5zZW5kRmlsZShwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBfY2xpZW50RGlyICsgJy9pbmRleC5odG1sJykpO1xuICAgIH07XG4gICAgYXBwLmdldCgnLyonLCByZW5kZXJJbmRleCk7XG5cbiAgICBhcHAubGlzdGVuKHBvcnQsIChlcnI6YW55KSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZygnc29tZXRoaW5nIGJhZCBoYXBwZW5lZCcsIGVycik7XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKGBzZXJ2ZXIgaXMgbGlzdGVuaW5nIG9uICR7cG9ydH1gKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEFwaSBSb3V0ZXMgZm9yIGBEZXZlbG9wbWVudGAuXG4gICAgICovXG4gIH1lbHNlIHtcbiAgICAvKipcbiAgICAgKiBQcm9kIE1vZGUuXG4gICAgICogQG5vdGUgUHJvZCBtb2Qgd2lsbCBnaXZlIHlvdSBzdGF0aWMgKyBtaWRkbGV3YXJlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXBpIFJvdXRlcyBmb3IgYFByb2R1Y3Rpb25gLlxuICAgICAqL1xuICAgIHJvdXRlcy5pbml0KGFwcCk7XG5cbiAgICAvKipcbiAgICAgKiBDbGllbnQgRGlyXG4gICAgICovXG4gICAgX2NsaWVudERpciA9ICcuLi8uLi9jbGllbnQvcHJvZCc7XG5cbiAgICAvKipcbiAgICAgKiBTdGF0aWMuXG4gICAgICovXG4gICAgYXBwLnVzZSgnL2pzJywgZXhwcmVzcy5zdGF0aWMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgX2NsaWVudERpciArICcvanMnKSkpO1xuICAgIGFwcC51c2UoJy9jc3MnLCBleHByZXNzLnN0YXRpYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBfY2xpZW50RGlyICsgJy9jc3MnKSkpO1xuICAgIGFwcC51c2UoJy9hc3NldHMnLCBleHByZXNzLnN0YXRpYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBfY2xpZW50RGlyICsgJy9hc3NldHMnKSkpO1xuXG4gICAgLyoqXG4gICAgICogU3BhIFJlcyBTZW5kZXIuXG4gICAgICogQHBhcmFtIHJlcSB7YW55fVxuICAgICAqIEBwYXJhbSByZXMge2FueX1cbiAgICAgKi9cbiAgICBsZXQgcmVuZGVySW5kZXggPSBmdW5jdGlvbiAocmVxOiBleHByZXNzLlJlcXVlc3QsIHJlczogZXhwcmVzcy5SZXNwb25zZSkge1xuICAgICAgcmVzLnNlbmRGaWxlKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIF9jbGllbnREaXIgKyAnL2luZGV4Lmh0bWwnKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFByZXZlbnQgc2VydmVyIHJvdXRpbmcgYW5kIHVzZSBAbmcyLXJvdXRlci5cbiAgICAgKi9cbiAgICBhcHAuZ2V0KCcvKicsIHJlbmRlckluZGV4KTtcblxuICAgIGFwcC5saXN0ZW4odXNlUG9ydCwgKGVycjphbnkpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKCdzb21ldGhpbmcgYmFkIGhhcHBlbmVkJywgZXJyKTtcbiAgICAgIH1cblxuICAgICAgY29uc29sZS5sb2coYHNlcnZlciBpcyBsaXN0ZW5pbmcgb24gJHt1c2VQb3J0fWApO1xuICAgIH0pO1xuICB9XG5cblxuICAvKipcbiAgICogU2VydmVyIHdpdGggZ3ppcCBjb21wcmVzc2lvbi5cbiAgICovXG4gIC8vIHJldHVybiBuZXcgUHJvbWlzZTxodHRwLlNlcnZlcj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAvLyAgIGxldCBzZXJ2ZXIgPSBhcHAubGlzdGVuKHBvcnQsICgpID0+IHtcbiAgLy8gICAgIHZhciBwb3J0ID0gc2VydmVyLmFkZHJlc3MoKS5wb3J0O1xuICAvLyAgICAgY29uc29sZS5sb2coJ0FwcCBpcyBsaXN0ZW5pbmcgb24gcG9ydDonICsgcG9ydCk7XG4gIC8vICAgICByZXNvbHZlKHNlcnZlcik7XG4gIC8vICAgfSk7XG4gIC8vIH0pO1xufVxuIl19
