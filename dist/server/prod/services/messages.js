"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
function messages(app) {
    var _messagesURL = '/messages';
    app.get(_messagesURL, function (req, res, next) {
        console.log('inside message get');
        res.contentType('application/json');
        db.query('SELECT * FROM Message ORDER BY message_date', null, function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.json(result.rows);
        });
    });
    app.post(_messagesURL + '/addMessage', function (req, res, next) {
        var a_id = 2;
        var dt = new Date();
        var expdt = new Date();
        var dayOfMonth = expdt.getDate();
        expdt.setDate(dayOfMonth + 10);
        db.query('INSERT INTO Message(message_text, message_date, message_expiration, admin_id, message_title) VALUES($1, $2, $3, $4, $5)', [req.body.messageContent, dt, expdt, a_id, req.body.title], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.send(result);
        });
    });
    app.put(_messagesURL + '/updateMessage', function (req, res, next) {
        console.log("edit id:" + req.body.id);
        db.query('UPDATE Message SET message_title = $2, message_text = $3  WHERE message_id = $1', [req.body.id, req.body.title, req.body.messageContent], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.send(result);
        });
    });
    app.delete(_messagesURL + '/deleteMessage', function (req, res, next) {
        var deleteID = parseInt(req.params.id);
        console.log('id:' + req.query.id);
        db.query('DELETE FROM Message WHERE message_id = $1', [req.query.id], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.send(result);
        });
    });
}
exports.messages = messages;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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RyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLEVBQUUsVUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7UUFDekQsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQyxFQUFFLENBQUMsS0FBSyxDQUFDLDJDQUEyQyxFQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFDLEdBQU8sRUFBRSxNQUFVO1lBRXZGLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBRSxHQUFHLENBQUMsQ0FBQztnQkFDbkIsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDL0IsQ0FBQztZQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUVMLENBQUM7QUE1RUQsNEJBNEVDIiwiZmlsZSI6InNlcnZpY2VzL21lc3NhZ2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCAqIGFzIGRiIGZyb20gJy4uL2RiL3BnJztcblxuZXhwb3J0IGZ1bmN0aW9uIG1lc3NhZ2VzKGFwcDogZXhwcmVzcy5BcHBsaWNhdGlvbikge1xuXG4gIGxldCBfbWVzc2FnZXNVUkwgPSAnL21lc3NhZ2VzJztcblxuICBhcHAuZ2V0KF9tZXNzYWdlc1VSTCwgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2luc2lkZSBtZXNzYWdlIGdldCcpO1xuICAgIHJlcy5jb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicpO1xuICAgIGRiLnF1ZXJ5KCdTRUxFQ1QgKiBGUk9NIE1lc3NhZ2UgT1JERVIgQlkgbWVzc2FnZV9kYXRlJywgbnVsbCwgKGVycjphbnksIHJlc3VsdDphbnkpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgY29uc29sZS5lcnJvciggZXJyKTtcbiAgICAgICAgICAgIHJlcy5zZW5kKCdFcnJvciAnICsgZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlcy5qc29uKHJlc3VsdC5yb3dzKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gICBhcHAuZ2V0KF9tZXNzYWdlc1VSTCArICcvcmVjZW50TWVzc2FnZXMnLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgLy8gICBjb25zb2xlLmxvZygnaW5zaWRlIG1lc3NhZ2UgZ2V0Jyk7XG4gIC8vICAgcmVzLmNvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi9qc29uJyk7XG4gIC8vICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuXG4gIC8vICAgZGIucXVlcnkoJ1NFTEVDVCAqIEZST00gTWVzc2FnZSBXSEVSRSBtZXNzYWdlX2V4cGlyYXRpb24gID4gZGF0ZSA9ICQxICcsIFtkYXRlXSwgKGVycjphbnksIHJlc3VsdDphbnkpID0+IHtcbiAgLy8gICAgIGlmIChlcnIpIHtcbiAgLy8gICAgICAgICAgY29uc29sZS5lcnJvciggZXJyKTtcbiAgLy8gICAgICAgICAgIHJlcy5zZW5kKCdFcnJvciAnICsgZXJyKTtcbiAgLy8gICAgIH1cbiAgLy8gICAgIHJlcy5qc29uKHJlc3VsdC5yb3dzKTtcbiAgLy8gICB9KTtcbiAgLy8gfSk7XG5cblxuLy9maXggd2hlbiBhZG1pbiBpcyBjcmVhdGVkIGJ5IGxvZ2luXG5hcHAucG9zdChfbWVzc2FnZXNVUkwgKyAnL2FkZE1lc3NhZ2UnLCAocmVxLCByZXMsIG5leHQpID0+IHtcblxuICB2YXIgYV9pZCA9IDI7XG4gIHZhciBkdCA9IG5ldyBEYXRlKCk7XG4gIHZhciBleHBkdCA9IG5ldyBEYXRlKCk7XG4gIHZhciBkYXlPZk1vbnRoID0gZXhwZHQuZ2V0RGF0ZSgpOyAgXG4gIGV4cGR0LnNldERhdGUoZGF5T2ZNb250aCArIDEwKTsgIFxuICBkYi5xdWVyeSgnSU5TRVJUIElOVE8gTWVzc2FnZShtZXNzYWdlX3RleHQsIG1lc3NhZ2VfZGF0ZSwgbWVzc2FnZV9leHBpcmF0aW9uLCBhZG1pbl9pZCwgbWVzc2FnZV90aXRsZSkgVkFMVUVTKCQxLCAkMiwgJDMsICQ0LCAkNSknLCBbcmVxLmJvZHkubWVzc2FnZUNvbnRlbnQsZHQsZXhwZHQsIGFfaWQscmVxLmJvZHkudGl0bGVdLCAoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xuICAgIGlmKGVycikge1xuICAgICAgICAgICBjb25zb2xlLmVycm9yKCBlcnIpO1xuICAgICAgICAgICAgcmVzLnNlbmQoJ0Vycm9yICcgKyBlcnIpO1xuICAgIH1cbiAgICByZXMuc2VuZChyZXN1bHQpO1xuICB9KTtcblxufSk7XG5cbmFwcC5wdXQoX21lc3NhZ2VzVVJMICsgJy91cGRhdGVNZXNzYWdlJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG5cbiAgICBjb25zb2xlLmxvZyhcImVkaXQgaWQ6XCIgKyByZXEuYm9keS5pZCk7XG4gICAgLy9jb21wYXJlIHdpdGggLmNvbXBhcmVTeW5jKHJlcS5ib2R5LmRhdGEuYXR0cmlidXRlcy5wYXNzd29yZCwgc3RvcmVkUFcpXG4gICAgZGIucXVlcnkoJ1VQREFURSBNZXNzYWdlIFNFVCBtZXNzYWdlX3RpdGxlID0gJDIsIG1lc3NhZ2VfdGV4dCA9ICQzICBXSEVSRSBtZXNzYWdlX2lkID0gJDEnLCBbcmVxLmJvZHkuaWQsIHJlcS5ib2R5LnRpdGxlLCByZXEuYm9keS5tZXNzYWdlQ29udGVudF0sIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIGVycik7XG4gICAgICAgICAgICByZXMuc2VuZCgnRXJyb3IgJyArIGVycik7XG4gICAgICB9XG4gICAgICByZXMuc2VuZChyZXN1bHQpO1xuICAgIH0pO1xuICB9KTtcblxuXG5hcHAuZGVsZXRlKF9tZXNzYWdlc1VSTCArICcvZGVsZXRlTWVzc2FnZScsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICB2YXIgZGVsZXRlSUQgPSBwYXJzZUludChyZXEucGFyYW1zLmlkKTtcbiAgY29uc29sZS5sb2coJ2lkOicgKyByZXEucXVlcnkuaWQpO1xuICAgIGRiLnF1ZXJ5KCdERUxFVEUgRlJPTSBNZXNzYWdlIFdIRVJFIG1lc3NhZ2VfaWQgPSAkMScsW3JlcS5xdWVyeS5pZF0sIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XG5cbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgY29uc29sZS5lcnJvciggZXJyKTtcbiAgICAgICAgICAgIHJlcy5zZW5kKCdFcnJvciAnICsgZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlcy5zZW5kKHJlc3VsdCk7XG4gICAgfSk7XG4gIH0pO1xuXG59XG4iXX0=
