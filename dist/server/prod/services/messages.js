"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
function messages(app) {
    var _messagesURL = '/messages';
    app.get(_messagesURL, function (req, res, next) {
        console.log('inside message get');
        res.contentType('application/json');
        db.query('SELECT * FROM Message', null, function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.json(result.rows);
        });
    });
    app.post(_messagesURL + '/addMessage', function (req, res, next) {
        var a_id = 2;
        var dt = new Date();
        var m_date = dt.toUTCString();
        db.query('INSERT INTO Message(message_text, message_date, admin_id, message_title) VALUES($1, $2, $3, $4)', [req.body.messageContent, m_date, a_id, req.body.title], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.send(result);
        });
    });
    app.put(_messagesURL + '/updateMessage', function (req, res, next) {
        console.log("edit id:" + req.body.id);
        db.query('UPDATE Message SET message_title = $2, message_text = $3  WHERE message_id = $1', [req.body.id, req.body.title, req.body.messageContent], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.send(result);
        });
    });
    app.delete(_messagesURL + '/deleteMessage', function (req, res, next) {
        var deleteID = parseInt(req.params.id);
        console.log('id:' + req.query.id);
        db.query('DELETE FROM Message WHERE message_id = $1', [req.query.id], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.send(result);
        });
    });
}
exports.messages = messages;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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RyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hDLEVBQUUsQ0FBQyxLQUFLLENBQUMsMkNBQTJDLEVBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQUMsR0FBTyxFQUFFLE1BQVU7WUFFdkYsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDTCxPQUFPLENBQUMsS0FBSyxDQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQixHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUMvQixDQUFDO1lBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUwsQ0FBQztBQTNERCw0QkEyREMiLCJmaWxlIjoic2VydmljZXMvbWVzc2FnZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgKiBhcyBkYiBmcm9tICcuLi9kYi9wZyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWVzc2FnZXMoYXBwOiBleHByZXNzLkFwcGxpY2F0aW9uKSB7XHJcblxyXG4gIGxldCBfbWVzc2FnZXNVUkwgPSAnL21lc3NhZ2VzJztcclxuXHJcbiAgYXBwLmdldChfbWVzc2FnZXNVUkwsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ2luc2lkZSBtZXNzYWdlIGdldCcpO1xyXG4gICAgcmVzLmNvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi9qc29uJyk7XHJcbiAgICBkYi5xdWVyeSgnU0VMRUNUICogRlJPTSBNZXNzYWdlJywgbnVsbCwgKGVycjphbnksIHJlc3VsdDphbnkpID0+IHtcclxuICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIGVycik7XHJcbiAgICAgICAgICAgIHJlcy5zZW5kKCdFcnJvciAnICsgZXJyKTtcclxuICAgICAgfVxyXG4gICAgICByZXMuanNvbihyZXN1bHQucm93cyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbi8vZml4IHdoZW4gYWRtaW4gaXMgY3JlYXRlZCBieSBsb2dpblxyXG5hcHAucG9zdChfbWVzc2FnZXNVUkwgKyAnL2FkZE1lc3NhZ2UnLCAocmVxLCByZXMsIG5leHQpID0+IHtcclxuXHJcbiAgdmFyIGFfaWQgPSAyO1xyXG4gIHZhciBkdCA9IG5ldyBEYXRlKCk7XHJcbiAgdmFyIG1fZGF0ZSA9IGR0LnRvVVRDU3RyaW5nKCk7XHJcbiAgZGIucXVlcnkoJ0lOU0VSVCBJTlRPIE1lc3NhZ2UobWVzc2FnZV90ZXh0LCBtZXNzYWdlX2RhdGUsIGFkbWluX2lkLCBtZXNzYWdlX3RpdGxlKSBWQUxVRVMoJDEsICQyLCAkMywgJDQpJywgW3JlcS5ib2R5Lm1lc3NhZ2VDb250ZW50LG1fZGF0ZSxhX2lkLHJlcS5ib2R5LnRpdGxlXSwgKGVycjphbnksIHJlc3VsdDphbnkpID0+IHtcclxuICAgIGlmKGVycikge1xyXG4gICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIGVycik7XHJcbiAgICAgICAgICAgIHJlcy5zZW5kKCdFcnJvciAnICsgZXJyKTtcclxuICAgIH1cclxuICAgIHJlcy5zZW5kKHJlc3VsdCk7XHJcbiAgfSk7XHJcblxyXG59KTtcclxuXHJcbmFwcC5wdXQoX21lc3NhZ2VzVVJMICsgJy91cGRhdGVNZXNzYWdlJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcblxyXG4gICAgY29uc29sZS5sb2coXCJlZGl0IGlkOlwiICsgcmVxLmJvZHkuaWQpO1xyXG4gICAgLy9jb21wYXJlIHdpdGggLmNvbXBhcmVTeW5jKHJlcS5ib2R5LmRhdGEuYXR0cmlidXRlcy5wYXNzd29yZCwgc3RvcmVkUFcpXHJcbiAgICBkYi5xdWVyeSgnVVBEQVRFIE1lc3NhZ2UgU0VUIG1lc3NhZ2VfdGl0bGUgPSAkMiwgbWVzc2FnZV90ZXh0ID0gJDMgIFdIRVJFIG1lc3NhZ2VfaWQgPSAkMScsIFtyZXEuYm9keS5pZCwgcmVxLmJvZHkudGl0bGUsIHJlcS5ib2R5Lm1lc3NhZ2VDb250ZW50XSwgKGVycjphbnksIHJlc3VsdDphbnkpID0+IHtcclxuICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIGVycik7XHJcbiAgICAgICAgICAgIHJlcy5zZW5kKCdFcnJvciAnICsgZXJyKTtcclxuICAgICAgfVxyXG4gICAgICByZXMuc2VuZChyZXN1bHQpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG5cclxuYXBwLmRlbGV0ZShfbWVzc2FnZXNVUkwgKyAnL2RlbGV0ZU1lc3NhZ2UnLCAocmVxLCByZXMsIG5leHQpID0+IHtcclxuICB2YXIgZGVsZXRlSUQgPSBwYXJzZUludChyZXEucGFyYW1zLmlkKTtcclxuICBjb25zb2xlLmxvZygnaWQ6JyArIHJlcS5xdWVyeS5pZCk7XHJcbiAgICBkYi5xdWVyeSgnREVMRVRFIEZST00gTWVzc2FnZSBXSEVSRSBtZXNzYWdlX2lkID0gJDEnLFtyZXEucXVlcnkuaWRdLCAoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xyXG5cclxuICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIGVycik7XHJcbiAgICAgICAgICAgIHJlcy5zZW5kKCdFcnJvciAnICsgZXJyKTtcclxuICAgICAgfVxyXG4gICAgICByZXMuc2VuZChyZXN1bHQpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG59XHJcbiJdfQ==
