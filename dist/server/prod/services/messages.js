"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
function messages(app) {
    var _messagesURL = '/messages';
    app.get(_messagesURL, function (req, res, next) {
        console.log('inside message get');
        res.contentType('application/json');
        db.query('SELECT * FROM Message', null, function (err, result) {
            if (err) {
                return console.error('error running query', err);
            }
            res.json(result.rows);
        });
    });
    app.post(_messagesURL + '/addMessage', function (req, res, next) {
        var a_id = 2;
        var dt = new Date();
        var m_date = dt.toUTCString();
        db.query('INSERT INTO Message(message_text, message_date, admin_id, message_title) VALUES($1, $2, $3, $4)', [req.body.messageContent, m_date, a_id, req.body.title], function (err, result) {
            if (err) {
                return console.error('error ', err);
            }
            res.send(result);
        });
    });
    app.put(_messagesURL + '/updateMessage', function (req, res, next) {
        console.log("edit id:" + req.body.id);
        db.query('UPDATE Message SET message_title = $2, message_text = $3  WHERE message_id = $1', [req.body.id, req.body.title, req.body.messageContent], function (err, result) {
            if (err) {
                return console.error('error running query', err);
            }
            res.send(result);
        });
    });
    app.delete(_messagesURL + '/deleteMessage', function (req, res, next) {
        var deleteID = parseInt(req.params.id);
        console.log("id:" + req.query.id);
        db.query('DELETE FROM Message WHERE message_id = $1', [req.query.id], function (err, result) {
            if (err) {
                return console.error('error running query', err);
            }
            res.send(result);
        });
    });
}
exports.messages = messages;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsQ0FBQTtRQUMvQixFQUFFLENBQUMsS0FBSyxDQUFDLDJDQUEyQyxFQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFDLEdBQU8sRUFBRSxNQUFVO1lBRXZGLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ1IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDbkQsQ0FBQztZQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUVMLENBQUM7QUF2REQsNEJBdURDIiwiZmlsZSI6InNlcnZpY2VzL21lc3NhZ2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcclxuaW1wb3J0ICogYXMgZGIgZnJvbSAnLi4vZGIvcGcnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1lc3NhZ2VzKGFwcDogZXhwcmVzcy5BcHBsaWNhdGlvbikge1xyXG5cclxuICBsZXQgX21lc3NhZ2VzVVJMID0gJy9tZXNzYWdlcyc7XHJcblxyXG4gIGFwcC5nZXQoX21lc3NhZ2VzVVJMLCAocmVxLCByZXMsIG5leHQpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdpbnNpZGUgbWVzc2FnZSBnZXQnKTtcclxuICAgIHJlcy5jb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicpO1xyXG4gICAgZGIucXVlcnkoJ1NFTEVDVCAqIEZST00gTWVzc2FnZScsIG51bGwsIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKCdlcnJvciBydW5uaW5nIHF1ZXJ5JywgZXJyKTtcclxuICAgICAgfVxyXG4gICAgICByZXMuanNvbihyZXN1bHQucm93cyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbi8vZml4IHdoZW4gYWRtaW4gaXMgY3JlYXRlZCBieSBsb2dpblxyXG5hcHAucG9zdChfbWVzc2FnZXNVUkwgKyAnL2FkZE1lc3NhZ2UnLCAocmVxLCByZXMsIG5leHQpID0+IHtcclxuXHJcbiAgdmFyIGFfaWQgPSAyO1xyXG4gIHZhciBkdCA9IG5ldyBEYXRlKCk7XHJcbiAgdmFyIG1fZGF0ZSA9IGR0LnRvVVRDU3RyaW5nKCk7XHJcbiAgZGIucXVlcnkoJ0lOU0VSVCBJTlRPIE1lc3NhZ2UobWVzc2FnZV90ZXh0LCBtZXNzYWdlX2RhdGUsIGFkbWluX2lkLCBtZXNzYWdlX3RpdGxlKSBWQUxVRVMoJDEsICQyLCAkMywgJDQpJywgW3JlcS5ib2R5Lm1lc3NhZ2VDb250ZW50LG1fZGF0ZSxhX2lkLHJlcS5ib2R5LnRpdGxlXSwgZnVuY3Rpb24oZXJyOmFueSwgcmVzdWx0OmFueSkge1xyXG4gICAgaWYoZXJyKSB7XHJcbiAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKCdlcnJvciAnLCBlcnIpO1xyXG4gICAgfVxyXG4gICAgcmVzLnNlbmQocmVzdWx0KTtcclxuICB9KTtcclxuXHJcbn0pO1xyXG5cclxuYXBwLnB1dChfbWVzc2FnZXNVUkwgKyAnL3VwZGF0ZU1lc3NhZ2UnLCAocmVxLCByZXMsIG5leHQpID0+IHtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhcImVkaXQgaWQ6XCIgKyByZXEuYm9keS5pZCk7XHJcbiAgICAvL2NvbXBhcmUgd2l0aCAuY29tcGFyZVN5bmMocmVxLmJvZHkuZGF0YS5hdHRyaWJ1dGVzLnBhc3N3b3JkLCBzdG9yZWRQVylcclxuICAgIGRiLnF1ZXJ5KCdVUERBVEUgTWVzc2FnZSBTRVQgbWVzc2FnZV90aXRsZSA9ICQyLCBtZXNzYWdlX3RleHQgPSAkMyAgV0hFUkUgbWVzc2FnZV9pZCA9ICQxJywgW3JlcS5ib2R5LmlkLCByZXEuYm9keS50aXRsZSwgcmVxLmJvZHkubWVzc2FnZUNvbnRlbnRdLCBmdW5jdGlvbihlcnI6YW55LCByZXN1bHQ6YW55KSB7XHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcignZXJyb3IgcnVubmluZyBxdWVyeScsIGVycik7XHJcbiAgICAgIH1cclxuICAgICAgcmVzLnNlbmQocmVzdWx0KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuXHJcbmFwcC5kZWxldGUoX21lc3NhZ2VzVVJMICsgJy9kZWxldGVNZXNzYWdlJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgdmFyIGRlbGV0ZUlEID0gcGFyc2VJbnQocmVxLnBhcmFtcy5pZClcclxuICBjb25zb2xlLmxvZyhcImlkOlwiICsgcmVxLnF1ZXJ5LmlkKVxyXG4gICAgZGIucXVlcnkoJ0RFTEVURSBGUk9NIE1lc3NhZ2UgV0hFUkUgbWVzc2FnZV9pZCA9ICQxJyxbcmVxLnF1ZXJ5LmlkXSwgKGVycjphbnksIHJlc3VsdDphbnkpID0+IHtcclxuXHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcignZXJyb3IgcnVubmluZyBxdWVyeScsIGVycik7XHJcbiAgICAgIH1cclxuICAgICAgcmVzLnNlbmQocmVzdWx0KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxufSJdfQ==
