"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
function messages(app) {
    var _messagesURL = '/messages';
    app.get(_messagesURL, function (req, res, next) {
        console.log('inside message get');
        res.contentType('application/json');
        db.query('SELECT * FROM Message', null, function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.json(result.rows);
        });
    });
    app.post(_messagesURL + '/addMessage', function (req, res, next) {
        var a_id = 2;
        var dt = new Date();
        var expdt = new Date();
        var dayOfMonth = expdt.getDate();
        expdt.setDate(dayOfMonth + 10);
        db.query('INSERT INTO Message(message_text, message_date, message_expiration, admin_id, message_title) VALUES($1, $2, $3, $4, $5)', [req.body.messageContent, dt, expdt, a_id, req.body.title], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.send(result);
        });
    });
    app.put(_messagesURL + '/updateMessage', function (req, res, next) {
        console.log("edit id:" + req.body.id);
        db.query('UPDATE Message SET message_title = $2, message_text = $3  WHERE message_id = $1', [req.body.id, req.body.title, req.body.messageContent], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.send(result);
        });
    });
    app.delete(_messagesURL + '/deleteMessage', function (req, res, next) {
        var deleteID = parseInt(req.params.id);
        console.log('id:' + req.query.id);
        db.query('DELETE FROM Message WHERE message_id = $1', [req.query.id], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.send(result);
        });
    });
}
exports.messages = messages;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL21lc3NhZ2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsNkJBQStCO0FBRS9CLGtCQUF5QixHQUF3QjtJQUUvQyxJQUFJLFlBQVksR0FBRyxXQUFXLENBQUM7SUFFL0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsVUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7UUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ2xDLEdBQUcsQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNwQyxFQUFFLENBQUMsS0FBSyxDQUFDLHVCQUF1QixFQUFFLElBQUksRUFBRSxVQUFDLEdBQU8sRUFBRSxNQUFVO1lBQzFELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBRSxHQUFHLENBQUMsQ0FBQztnQkFDbkIsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDL0IsQ0FBQztZQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFrQkwsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsYUFBYSxFQUFFLFVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO1FBRXBELElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztRQUNiLElBQUksRUFBRSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDcEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUN2QixJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDakMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDL0IsRUFBRSxDQUFDLEtBQUssQ0FBQyx5SEFBeUgsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFDLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsVUFBQyxHQUFPLEVBQUUsTUFBVTtZQUMvTSxFQUFFLENBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNGLE9BQU8sQ0FBQyxLQUFLLENBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ25CLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ2pDLENBQUM7WUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO0lBRUwsQ0FBQyxDQUFDLENBQUM7SUFFSCxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxnQkFBZ0IsRUFBRSxVQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtRQUVwRCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXRDLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUZBQWlGLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLFVBQUMsR0FBTyxFQUFFLE1BQVU7WUFDdEssRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDTCxPQUFPLENBQUMsS0FBSyxDQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQixHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUMvQixDQUFDO1lBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBR0wsR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLEVBQUUsVUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7UUFDekQsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQyxFQUFFLENBQUMsS0FBSyxDQUFDLDJDQUEyQyxFQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFDLEdBQU8sRUFBRSxNQUFVO1lBRXZGLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBRSxHQUFHLENBQUMsQ0FBQztnQkFDbkIsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDL0IsQ0FBQztZQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUVMLENBQUM7QUE1RUQsNEJBNEVDIiwiZmlsZSI6InNlcnZpY2VzL21lc3NhZ2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcclxuaW1wb3J0ICogYXMgZGIgZnJvbSAnLi4vZGIvcGcnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1lc3NhZ2VzKGFwcDogZXhwcmVzcy5BcHBsaWNhdGlvbikge1xyXG5cclxuICBsZXQgX21lc3NhZ2VzVVJMID0gJy9tZXNzYWdlcyc7XHJcblxyXG4gIGFwcC5nZXQoX21lc3NhZ2VzVVJMLCAocmVxLCByZXMsIG5leHQpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdpbnNpZGUgbWVzc2FnZSBnZXQnKTtcclxuICAgIHJlcy5jb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicpO1xyXG4gICAgZGIucXVlcnkoJ1NFTEVDVCAqIEZST00gTWVzc2FnZScsIG51bGwsIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICBjb25zb2xlLmVycm9yKCBlcnIpO1xyXG4gICAgICAgICAgICByZXMuc2VuZCgnRXJyb3IgJyArIGVycik7XHJcbiAgICAgIH1cclxuICAgICAgcmVzLmpzb24ocmVzdWx0LnJvd3MpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vICAgYXBwLmdldChfbWVzc2FnZXNVUkwgKyAnL3JlY2VudE1lc3NhZ2VzJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgLy8gICBjb25zb2xlLmxvZygnaW5zaWRlIG1lc3NhZ2UgZ2V0Jyk7XHJcbiAgLy8gICByZXMuY29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nKTtcclxuICAvLyAgIHZhciBkYXRlID0gbmV3IERhdGUoKTtcclxuXHJcbiAgLy8gICBkYi5xdWVyeSgnU0VMRUNUICogRlJPTSBNZXNzYWdlIFdIRVJFIG1lc3NhZ2VfZXhwaXJhdGlvbiAgPiBkYXRlID0gJDEgJywgW2RhdGVdLCAoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xyXG4gIC8vICAgICBpZiAoZXJyKSB7XHJcbiAgLy8gICAgICAgICAgY29uc29sZS5lcnJvciggZXJyKTtcclxuICAvLyAgICAgICAgICAgcmVzLnNlbmQoJ0Vycm9yICcgKyBlcnIpO1xyXG4gIC8vICAgICB9XHJcbiAgLy8gICAgIHJlcy5qc29uKHJlc3VsdC5yb3dzKTtcclxuICAvLyAgIH0pO1xyXG4gIC8vIH0pO1xyXG5cclxuXHJcbi8vZml4IHdoZW4gYWRtaW4gaXMgY3JlYXRlZCBieSBsb2dpblxyXG5hcHAucG9zdChfbWVzc2FnZXNVUkwgKyAnL2FkZE1lc3NhZ2UnLCAocmVxLCByZXMsIG5leHQpID0+IHtcclxuXHJcbiAgdmFyIGFfaWQgPSAyO1xyXG4gIHZhciBkdCA9IG5ldyBEYXRlKCk7XHJcbiAgdmFyIGV4cGR0ID0gbmV3IERhdGUoKTtcclxuICB2YXIgZGF5T2ZNb250aCA9IGV4cGR0LmdldERhdGUoKTsgIFxyXG4gIGV4cGR0LnNldERhdGUoZGF5T2ZNb250aCArIDEwKTsgIFxyXG4gIGRiLnF1ZXJ5KCdJTlNFUlQgSU5UTyBNZXNzYWdlKG1lc3NhZ2VfdGV4dCwgbWVzc2FnZV9kYXRlLCBtZXNzYWdlX2V4cGlyYXRpb24sIGFkbWluX2lkLCBtZXNzYWdlX3RpdGxlKSBWQUxVRVMoJDEsICQyLCAkMywgJDQsICQ1KScsIFtyZXEuYm9keS5tZXNzYWdlQ29udGVudCxkdCxleHBkdCwgYV9pZCxyZXEuYm9keS50aXRsZV0sIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XHJcbiAgICBpZihlcnIpIHtcclxuICAgICAgICAgICBjb25zb2xlLmVycm9yKCBlcnIpO1xyXG4gICAgICAgICAgICByZXMuc2VuZCgnRXJyb3IgJyArIGVycik7XHJcbiAgICB9XHJcbiAgICByZXMuc2VuZChyZXN1bHQpO1xyXG4gIH0pO1xyXG5cclxufSk7XHJcblxyXG5hcHAucHV0KF9tZXNzYWdlc1VSTCArICcvdXBkYXRlTWVzc2FnZScsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG5cclxuICAgIGNvbnNvbGUubG9nKFwiZWRpdCBpZDpcIiArIHJlcS5ib2R5LmlkKTtcclxuICAgIC8vY29tcGFyZSB3aXRoIC5jb21wYXJlU3luYyhyZXEuYm9keS5kYXRhLmF0dHJpYnV0ZXMucGFzc3dvcmQsIHN0b3JlZFBXKVxyXG4gICAgZGIucXVlcnkoJ1VQREFURSBNZXNzYWdlIFNFVCBtZXNzYWdlX3RpdGxlID0gJDIsIG1lc3NhZ2VfdGV4dCA9ICQzICBXSEVSRSBtZXNzYWdlX2lkID0gJDEnLCBbcmVxLmJvZHkuaWQsIHJlcS5ib2R5LnRpdGxlLCByZXEuYm9keS5tZXNzYWdlQ29udGVudF0sIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICBjb25zb2xlLmVycm9yKCBlcnIpO1xyXG4gICAgICAgICAgICByZXMuc2VuZCgnRXJyb3IgJyArIGVycik7XHJcbiAgICAgIH1cclxuICAgICAgcmVzLnNlbmQocmVzdWx0KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuXHJcbmFwcC5kZWxldGUoX21lc3NhZ2VzVVJMICsgJy9kZWxldGVNZXNzYWdlJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgdmFyIGRlbGV0ZUlEID0gcGFyc2VJbnQocmVxLnBhcmFtcy5pZCk7XHJcbiAgY29uc29sZS5sb2coJ2lkOicgKyByZXEucXVlcnkuaWQpO1xyXG4gICAgZGIucXVlcnkoJ0RFTEVURSBGUk9NIE1lc3NhZ2UgV0hFUkUgbWVzc2FnZV9pZCA9ICQxJyxbcmVxLnF1ZXJ5LmlkXSwgKGVycjphbnksIHJlc3VsdDphbnkpID0+IHtcclxuXHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICBjb25zb2xlLmVycm9yKCBlcnIpO1xyXG4gICAgICAgICAgICByZXMuc2VuZCgnRXJyb3IgJyArIGVycik7XHJcbiAgICAgIH1cclxuICAgICAgcmVzLnNlbmQocmVzdWx0KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxufVxyXG4iXX0=
