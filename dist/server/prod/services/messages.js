"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
function messages(app) {
    var _messagesURL = '/messages';
    app.get(_messagesURL, function (req, res, next) {
        console.log('inside message get');
        res.contentType('application/json');
        db.query('SELECT * FROM Message', null, function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.json(result.rows);
        });
    });
    app.post(_messagesURL + '/addMessage', function (req, res, next) {
        var a_id = 2;
        var dt = new Date();
        var expdt = new Date();
        var dayOfMonth = expdt.getDate();
        expdt.setDate(dayOfMonth + 10);
        db.query('INSERT INTO Message(message_text, message_date, message_expiration, admin_id, message_title) VALUES($1, $2, $3, $4, $5)', [req.body.messageContent, dt, expdt, a_id, req.body.title], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.send(result);
        });
    });
    app.put(_messagesURL + '/updateMessage', function (req, res, next) {
        console.log("edit id:" + req.body.id);
        db.query('UPDATE Message SET message_title = $2, message_text = $3  WHERE message_id = $1', [req.body.id, req.body.title, req.body.messageContent], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.send(result);
        });
    });
    app.delete(_messagesURL + '/deleteMessage', function (req, res, next) {
        var deleteID = parseInt(req.params.id);
        console.log('id:' + req.query.id);
        db.query('DELETE FROM Message WHERE message_id = $1', [req.query.id], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.send(result);
        });
    });
}
exports.messages = messages;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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RyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLEVBQUUsVUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7UUFDekQsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQyxFQUFFLENBQUMsS0FBSyxDQUFDLDJDQUEyQyxFQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFDLEdBQU8sRUFBRSxNQUFVO1lBRXZGLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBRSxHQUFHLENBQUMsQ0FBQztnQkFDbkIsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDL0IsQ0FBQztZQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUVMLENBQUM7QUE1RUQsNEJBNEVDIiwiZmlsZSI6InNlcnZpY2VzL21lc3NhZ2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCAqIGFzIGRiIGZyb20gJy4uL2RiL3BnJztcblxuZXhwb3J0IGZ1bmN0aW9uIG1lc3NhZ2VzKGFwcDogZXhwcmVzcy5BcHBsaWNhdGlvbikge1xuXG4gIGxldCBfbWVzc2FnZXNVUkwgPSAnL21lc3NhZ2VzJztcblxuICBhcHAuZ2V0KF9tZXNzYWdlc1VSTCwgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2luc2lkZSBtZXNzYWdlIGdldCcpO1xuICAgIHJlcy5jb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicpO1xuICAgIGRiLnF1ZXJ5KCdTRUxFQ1QgKiBGUk9NIE1lc3NhZ2UnLCBudWxsLCAoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICAgICBjb25zb2xlLmVycm9yKCBlcnIpO1xuICAgICAgICAgICAgcmVzLnNlbmQoJ0Vycm9yICcgKyBlcnIpO1xuICAgICAgfVxuICAgICAgcmVzLmpzb24ocmVzdWx0LnJvd3MpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyAgIGFwcC5nZXQoX21lc3NhZ2VzVVJMICsgJy9yZWNlbnRNZXNzYWdlcycsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAvLyAgIGNvbnNvbGUubG9nKCdpbnNpZGUgbWVzc2FnZSBnZXQnKTtcbiAgLy8gICByZXMuY29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgLy8gICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XG5cbiAgLy8gICBkYi5xdWVyeSgnU0VMRUNUICogRlJPTSBNZXNzYWdlIFdIRVJFIG1lc3NhZ2VfZXhwaXJhdGlvbiAgPiBkYXRlID0gJDEgJywgW2RhdGVdLCAoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xuICAvLyAgICAgaWYgKGVycikge1xuICAvLyAgICAgICAgICBjb25zb2xlLmVycm9yKCBlcnIpO1xuICAvLyAgICAgICAgICAgcmVzLnNlbmQoJ0Vycm9yICcgKyBlcnIpO1xuICAvLyAgICAgfVxuICAvLyAgICAgcmVzLmpzb24ocmVzdWx0LnJvd3MpO1xuICAvLyAgIH0pO1xuICAvLyB9KTtcblxuXG4vL2ZpeCB3aGVuIGFkbWluIGlzIGNyZWF0ZWQgYnkgbG9naW5cbmFwcC5wb3N0KF9tZXNzYWdlc1VSTCArICcvYWRkTWVzc2FnZScsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuXG4gIHZhciBhX2lkID0gMjtcbiAgdmFyIGR0ID0gbmV3IERhdGUoKTtcbiAgdmFyIGV4cGR0ID0gbmV3IERhdGUoKTtcbiAgdmFyIGRheU9mTW9udGggPSBleHBkdC5nZXREYXRlKCk7ICBcbiAgZXhwZHQuc2V0RGF0ZShkYXlPZk1vbnRoICsgMTApOyAgXG4gIGRiLnF1ZXJ5KCdJTlNFUlQgSU5UTyBNZXNzYWdlKG1lc3NhZ2VfdGV4dCwgbWVzc2FnZV9kYXRlLCBtZXNzYWdlX2V4cGlyYXRpb24sIGFkbWluX2lkLCBtZXNzYWdlX3RpdGxlKSBWQUxVRVMoJDEsICQyLCAkMywgJDQsICQ1KScsIFtyZXEuYm9keS5tZXNzYWdlQ29udGVudCxkdCxleHBkdCwgYV9pZCxyZXEuYm9keS50aXRsZV0sIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XG4gICAgaWYoZXJyKSB7XG4gICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIGVycik7XG4gICAgICAgICAgICByZXMuc2VuZCgnRXJyb3IgJyArIGVycik7XG4gICAgfVxuICAgIHJlcy5zZW5kKHJlc3VsdCk7XG4gIH0pO1xuXG59KTtcblxuYXBwLnB1dChfbWVzc2FnZXNVUkwgKyAnL3VwZGF0ZU1lc3NhZ2UnLCAocmVxLCByZXMsIG5leHQpID0+IHtcblxuICAgIGNvbnNvbGUubG9nKFwiZWRpdCBpZDpcIiArIHJlcS5ib2R5LmlkKTtcbiAgICAvL2NvbXBhcmUgd2l0aCAuY29tcGFyZVN5bmMocmVxLmJvZHkuZGF0YS5hdHRyaWJ1dGVzLnBhc3N3b3JkLCBzdG9yZWRQVylcbiAgICBkYi5xdWVyeSgnVVBEQVRFIE1lc3NhZ2UgU0VUIG1lc3NhZ2VfdGl0bGUgPSAkMiwgbWVzc2FnZV90ZXh0ID0gJDMgIFdIRVJFIG1lc3NhZ2VfaWQgPSAkMScsIFtyZXEuYm9keS5pZCwgcmVxLmJvZHkudGl0bGUsIHJlcS5ib2R5Lm1lc3NhZ2VDb250ZW50XSwgKGVycjphbnksIHJlc3VsdDphbnkpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgY29uc29sZS5lcnJvciggZXJyKTtcbiAgICAgICAgICAgIHJlcy5zZW5kKCdFcnJvciAnICsgZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlcy5zZW5kKHJlc3VsdCk7XG4gICAgfSk7XG4gIH0pO1xuXG5cbmFwcC5kZWxldGUoX21lc3NhZ2VzVVJMICsgJy9kZWxldGVNZXNzYWdlJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIHZhciBkZWxldGVJRCA9IHBhcnNlSW50KHJlcS5wYXJhbXMuaWQpO1xuICBjb25zb2xlLmxvZygnaWQ6JyArIHJlcS5xdWVyeS5pZCk7XG4gICAgZGIucXVlcnkoJ0RFTEVURSBGUk9NIE1lc3NhZ2UgV0hFUkUgbWVzc2FnZV9pZCA9ICQxJyxbcmVxLnF1ZXJ5LmlkXSwgKGVycjphbnksIHJlc3VsdDphbnkpID0+IHtcblxuICAgICAgaWYgKGVycikge1xuICAgICAgICAgICBjb25zb2xlLmVycm9yKCBlcnIpO1xuICAgICAgICAgICAgcmVzLnNlbmQoJ0Vycm9yICcgKyBlcnIpO1xuICAgICAgfVxuICAgICAgcmVzLnNlbmQocmVzdWx0KTtcbiAgICB9KTtcbiAgfSk7XG5cbn1cbiJdfQ==
