"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
function messages(app) {
    var _messagesURL = '/messages';
    app.get(_messagesURL, function (req, res, next) {
        console.log('inside message get');
        res.contentType('application/json');
        db.query('SELECT * FROM Message', null, function (err, result) {
            if (err) {
                return console.error('error running query', err);
            }
            res.json(result.rows);
        });
    });
    app.post(_messagesURL + '/addMessage', function (req, res, next) {
        var a_id = 2;
        var dt = new Date();
        var m_date = dt.toUTCString();
        db.query('INSERT INTO Message(message_text, message_date, admin_id, message_title) VALUES($1, $2, $3, $4)', [req.body.messageContent, m_date, a_id, req.body.title], function (err, result) {
            if (err) {
                return console.error('error ', err);
            }
            res.send(result);
        });
    });
    app.put(_messagesURL + '/updateMessage', function (req, res, next) {
        console.log("edit id:" + req.body.id);
        db.query('UPDATE Message SET message_title = $2, message_text = $3  WHERE message_id = $1', [req.body.id, req.body.title, req.body.messageContent], function (err, result) {
            if (err) {
                return console.error('error running query', err);
            }
            res.send(result);
        });
    });
    app.delete(_messagesURL + '/deleteMessage', function (req, res, next) {
        var deleteID = parseInt(req.params.id);
        console.log('id:' + req.query.id);
        db.query('DELETE FROM Message WHERE message_id = $1', [req.query.id], function (err, result) {
            if (err) {
                return console.error('error running query', err);
            }
            res.send(result);
        });
    });
}
exports.messages = messages;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL21lc3NhZ2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsNkJBQStCO0FBRS9CLGtCQUF5QixHQUF3QjtJQUUvQyxJQUFJLFlBQVksR0FBRyxXQUFXLENBQUM7SUFFL0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsVUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7UUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ2xDLEdBQUcsQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNwQyxFQUFFLENBQUMsS0FBSyxDQUFDLHVCQUF1QixFQUFFLElBQUksRUFBRSxVQUFDLEdBQU8sRUFBRSxNQUFVO1lBQzFELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDckQsQ0FBQztZQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFHTCxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksR0FBRyxhQUFhLEVBQUUsVUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7UUFFcEQsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxFQUFFLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNwQixJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDOUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxpR0FBaUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFDLE1BQU0sRUFBQyxJQUFJLEVBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxVQUFDLEdBQU8sRUFBRSxNQUFVO1lBQ3BMLEVBQUUsQ0FBQSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ1AsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7WUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO0lBRUwsQ0FBQyxDQUFDLENBQUM7SUFFSCxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxnQkFBZ0IsRUFBRSxVQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtRQUVwRCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXRDLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUZBQWlGLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLFVBQUMsR0FBTyxFQUFFLE1BQVU7WUFDdEssRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDUixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNuRCxDQUFDO1lBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBR0wsR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLEVBQUUsVUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7UUFDekQsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQyxFQUFFLENBQUMsS0FBSyxDQUFDLDJDQUEyQyxFQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFDLEdBQU8sRUFBRSxNQUFVO1lBRXZGLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ1IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDbkQsQ0FBQztZQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUVMLENBQUM7QUF2REQsNEJBdURDIiwiZmlsZSI6InNlcnZpY2VzL21lc3NhZ2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCAqIGFzIGRiIGZyb20gJy4uL2RiL3BnJztcblxuZXhwb3J0IGZ1bmN0aW9uIG1lc3NhZ2VzKGFwcDogZXhwcmVzcy5BcHBsaWNhdGlvbikge1xuXG4gIGxldCBfbWVzc2FnZXNVUkwgPSAnL21lc3NhZ2VzJztcblxuICBhcHAuZ2V0KF9tZXNzYWdlc1VSTCwgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2luc2lkZSBtZXNzYWdlIGdldCcpO1xuICAgIHJlcy5jb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicpO1xuICAgIGRiLnF1ZXJ5KCdTRUxFQ1QgKiBGUk9NIE1lc3NhZ2UnLCBudWxsLCAoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKCdlcnJvciBydW5uaW5nIHF1ZXJ5JywgZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlcy5qc29uKHJlc3VsdC5yb3dzKTtcbiAgICB9KTtcbiAgfSk7XG5cbi8vZml4IHdoZW4gYWRtaW4gaXMgY3JlYXRlZCBieSBsb2dpblxuYXBwLnBvc3QoX21lc3NhZ2VzVVJMICsgJy9hZGRNZXNzYWdlJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG5cbiAgdmFyIGFfaWQgPSAyO1xuICB2YXIgZHQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgbV9kYXRlID0gZHQudG9VVENTdHJpbmcoKTtcbiAgZGIucXVlcnkoJ0lOU0VSVCBJTlRPIE1lc3NhZ2UobWVzc2FnZV90ZXh0LCBtZXNzYWdlX2RhdGUsIGFkbWluX2lkLCBtZXNzYWdlX3RpdGxlKSBWQUxVRVMoJDEsICQyLCAkMywgJDQpJywgW3JlcS5ib2R5Lm1lc3NhZ2VDb250ZW50LG1fZGF0ZSxhX2lkLHJlcS5ib2R5LnRpdGxlXSwgKGVycjphbnksIHJlc3VsdDphbnkpID0+IHtcbiAgICBpZihlcnIpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKCdlcnJvciAnLCBlcnIpO1xuICAgIH1cbiAgICByZXMuc2VuZChyZXN1bHQpO1xuICB9KTtcblxufSk7XG5cbmFwcC5wdXQoX21lc3NhZ2VzVVJMICsgJy91cGRhdGVNZXNzYWdlJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG5cbiAgICBjb25zb2xlLmxvZyhcImVkaXQgaWQ6XCIgKyByZXEuYm9keS5pZCk7XG4gICAgLy9jb21wYXJlIHdpdGggLmNvbXBhcmVTeW5jKHJlcS5ib2R5LmRhdGEuYXR0cmlidXRlcy5wYXNzd29yZCwgc3RvcmVkUFcpXG4gICAgZGIucXVlcnkoJ1VQREFURSBNZXNzYWdlIFNFVCBtZXNzYWdlX3RpdGxlID0gJDIsIG1lc3NhZ2VfdGV4dCA9ICQzICBXSEVSRSBtZXNzYWdlX2lkID0gJDEnLCBbcmVxLmJvZHkuaWQsIHJlcS5ib2R5LnRpdGxlLCByZXEuYm9keS5tZXNzYWdlQ29udGVudF0sIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKCdlcnJvciBydW5uaW5nIHF1ZXJ5JywgZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlcy5zZW5kKHJlc3VsdCk7XG4gICAgfSk7XG4gIH0pO1xuXG5cbmFwcC5kZWxldGUoX21lc3NhZ2VzVVJMICsgJy9kZWxldGVNZXNzYWdlJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIHZhciBkZWxldGVJRCA9IHBhcnNlSW50KHJlcS5wYXJhbXMuaWQpO1xuICBjb25zb2xlLmxvZygnaWQ6JyArIHJlcS5xdWVyeS5pZCk7XG4gICAgZGIucXVlcnkoJ0RFTEVURSBGUk9NIE1lc3NhZ2UgV0hFUkUgbWVzc2FnZV9pZCA9ICQxJyxbcmVxLnF1ZXJ5LmlkXSwgKGVycjphbnksIHJlc3VsdDphbnkpID0+IHtcblxuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcignZXJyb3IgcnVubmluZyBxdWVyeScsIGVycik7XG4gICAgICB9XG4gICAgICByZXMuc2VuZChyZXN1bHQpO1xuICAgIH0pO1xuICB9KTtcblxufVxuIl19
