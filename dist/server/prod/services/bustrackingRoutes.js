"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
var getDriverInfo = 'SELECT driver_id, driver_firstname, driver_lastname, bus_id, bus_name,bus_status, route_id, route_name FROM bus NATURAL JOIN driver NATURAL JOIN route WHERE driver_id = $1';
var getRoutes = 'SELECT route_name,route_id FROM route';
var getDriverBusID = 'SELECT bus_id FROM driver WHERE driver_id = $1';
var getGPSid = 'SELECT gps_id FROM bus WHERE bus_id = $1';
var getDriverBusGPSid = 'SELECT gps_id FROM bus NATURAL JOIN driver WHERE driver_id = $1';
var changeDriverRoute = 'UPDATE bus SET route_id = $1 where bus_id=$2';
var updateDriverBus = 'UPDATE driver SET bus_id= $1 WHERE driver_id = $2';
var updateBusStatus = 'UPDATE bus SET bus_status = $1 WHERE bus_id = $2';
var updateBusLocation = 'UPDATE GPS SET gps_latitude = $1, gps_longitude = $2 WHERE gps_id = $3';
var checkCredentials = "SELECT driver_id FROM driver WHERE driver_username=$1 and driver_password=$2";
var login = 'UPDATE driver SET driver_status = \'logged\' WHERE driver_id = $1';
var logout = 'UPDATE driver SET driver_status = \'not logged\' WHERE driver_id = $1';
var _trackURL = '/bustrackingRoutes';
function bustrack(app) {
    app.get(_trackURL + '/getDriverInfo', function (req, res, next) {
        console.log(" getting driver info", req.body);
        db.query(getDriverInfo, [req.query.driver_id], function (err, result) {
            if (err) {
                console.error(err);
                res.send("Error " + err);
            }
            else {
                res.json(result.rows[0]);
                console.log(result.rows[0]);
            }
        });
    });
    app.get(_trackURL + '/getRoutes', function (req, res, next) {
        console.log("getting tim's routes ");
        db.query(getRoutes, null, function (err, result) {
            if (err) {
                console.error(err);
                res.send("Error " + err);
            }
            else {
                res.json(result.rows);
                console.log(result.rows);
            }
        });
    });
    app.put(_trackURL + '/changeDriverRoute', function (req, res, next) {
        console.log("entre a cambiar ruta de conductor", req.body);
        db.query(changeDriverRoute, [req.body.route_id, req.body.bus_id], function (err, result) {
            if (err) {
                console.error(err);
                res.send("Error" + err);
            }
            else {
                db.query(getDriverInfo, [req.body.driver_id], function (err, result) {
                    if (err) {
                        console.error(err);
                        res.send("Error" + err);
                    }
                    else
                        res.json(result.rows[0]);
                });
            }
        });
    });
    app.put(_trackURL + '/updateBusStatus', function (req, res, next) {
        console.log("haciendo update al status del bus", req.body);
        db.query(updateBusStatus, [req.body.bus_status, req.body.bus_id], function (err, result) {
            if (err) {
                console.error(err);
                res.send("Error" + err);
            }
            else {
                db.query(getDriverInfo, [req.body.driver_id], function (err, result) {
                    if (err) {
                        console.error(err);
                        res.send("Error" + err);
                    }
                    else {
                        res.json(result.rows[0]);
                    }
                });
            }
        });
    });
    app.put(_trackURL + '/updateBusLocation', function (req, res, next) {
        console.log("updating bus location", req.body);
        db.query(getDriverBusGPSid, [req.body.driver_id], function (err, result) {
            if (err) {
                console.error(err);
                res.send("Error" + err);
            }
            else {
                var gps_id = result.rows[0].gps_id;
                db.query(updateBusLocation, [req.body.lat, req.body.lng, gps_id], function (err, result) {
                    if (err) {
                        console.error(err);
                        res.send("Error" + err);
                    }
                    else
                        res.json({ success: 1 });
                });
            }
        });
    });
    app.post(_trackURL + '/login', function (req, res, next) {
        console.log("entre al login", req.body);
        db.query(checkCredentials, [req.body.username, req.body.password], function (err, result) {
            if (err) {
                console.error(err);
                res.send("Error" + err);
            }
            else {
                if (result.rows.length == 0) {
                    res.json({ driver_id: -1 });
                }
                else {
                    var driverid = result.rows[0];
                    db.query(login, [driverid.driver_id], function (err, result) {
                        if (err) {
                            console.error(err);
                            res.send("Error" + err);
                        }
                        else {
                            console.log("driverid", driverid);
                            res.json(driverid);
                        }
                    });
                }
            }
        });
    });
    app.put(_trackURL + '/logout', function (req, res, next) {
        console.log("login out", req.body);
        db.query(logout, [req.body.driver_id], function (err, result) {
            if (err) {
                console.error(err);
                res.send("Error" + err);
            }
            else {
                res.json({ "success": 1 });
            }
        });
    });
}
exports.bustrack = bustrack;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
