"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
var getAllRoutes = 'SELECT * FROM Route NATURAL JOIN routepath';
var getRoute = 'SELECT * FROM route NATURAL JOIN routepath WHERE route_id = $1';
var updateRoute = 'UPDATE Route SET route_name=$1, route_description=$2, route_area=$3 WHERE route_id=$4';
var getBusLocation = 'SELECT gps_latitude, gps_longitude, bus_name FROM bus NATURAL JOIN gps WHERE bus_status=\'Active\'';
function routes(app) {
    var _routesURL = '/routes';
    app.get(_routesURL, function (req, res, next) {
        console.log('inside routes get');
        res.contentType('application/json');
        db.query(getAllRoutes, null, function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            else {
                res.json(result.rows);
            }
        });
    });
    app.get(_routesURL + '/getRoute', function (req, res, next) {
        res.contentType('application/json');
        db.query(getRoute, [req.query.r_id], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            else {
                res.json(result.rows);
            }
        });
    });
    app.put(_routesURL + '/updateRoute', function (req, res, next) {
        db.query(updateRoute, [req.body.route_name, req.body.route_description, req.body.route_area, req.body.route_id], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            else {
                db.query(getAllRoutes, null, function (err, result) {
                    if (err) {
                        console.error(err);
                        res.send('Error ' + err);
                    }
                    else {
                        res.json(result.rows);
                    }
                });
            }
        });
    });
    app.get(_routesURL + '/getBusLocation', function (req, res, next) {
        res.contentType('application/json');
        db.query(getBusLocation, null, function (err, result) {
            if (err) {
                res.send('Error ' + err);
            }
            else {
                console.error(result.rows);
                res.json(result.rows);
            }
        });
    });
}
exports.routes = routes;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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Q0FBQzt3QkFBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FBQztvQkFDL0MsQ0FBQztvQkFBQSxJQUFJLENBQUMsQ0FBQzt3QkFDTCxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDeEIsQ0FBQztnQkFDSCxDQUFDLENBQUMsQ0FBQztZQUNMLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsaUJBQWlCLEVBQUUsVUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7UUFDckQsR0FBRyxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3BDLEVBQUUsQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLElBQUksRUFBRSxVQUFDLEdBQU8sRUFBRSxNQUFVO1lBQ2pELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDN0IsQ0FBQztZQUFBLElBQUksQ0FBQyxDQUFDO2dCQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMzQixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILENBQUM7QUF0REQsd0JBc0RDIiwiZmlsZSI6InNlcnZpY2VzL3JvdXRlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCAqIGFzIGRiIGZyb20gJy4uL2RiL3BnJztcclxuXHJcbnZhciBnZXRBbGxSb3V0ZXMgPSAnU0VMRUNUICogRlJPTSBSb3V0ZSBOQVRVUkFMIEpPSU4gcm91dGVwYXRoJztcclxudmFyIGdldFJvdXRlID0gJ1NFTEVDVCAqIEZST00gcm91dGUgTkFUVVJBTCBKT0lOIHJvdXRlcGF0aCBXSEVSRSByb3V0ZV9pZCA9ICQxJztcclxudmFyIHVwZGF0ZVJvdXRlID0gJ1VQREFURSBSb3V0ZSBTRVQgcm91dGVfbmFtZT0kMSwgcm91dGVfZGVzY3JpcHRpb249JDIsIHJvdXRlX2FyZWE9JDMgV0hFUkUgcm91dGVfaWQ9JDQnO1xyXG52YXIgZ2V0QnVzTG9jYXRpb24gPSAnU0VMRUNUIGdwc19sYXRpdHVkZSwgZ3BzX2xvbmdpdHVkZSwgYnVzX25hbWUgRlJPTSBidXMgTkFUVVJBTCBKT0lOIGdwcyBXSEVSRSBidXNfc3RhdHVzPVxcJ0FjdGl2ZVxcJyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcm91dGVzKGFwcDogZXhwcmVzcy5BcHBsaWNhdGlvbikge1xyXG5cclxubGV0IF9yb3V0ZXNVUkwgPSAnL3JvdXRlcyc7XHJcbmFwcC5nZXQoX3JvdXRlc1VSTCwgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnaW5zaWRlIHJvdXRlcyBnZXQnKTtcclxuICAgIHJlcy5jb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicpO1xyXG4gICAgZGIucXVlcnkoZ2V0QWxsUm91dGVzLCBudWxsLCAoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpOyByZXMuc2VuZCgnRXJyb3IgJyArIGVycik7XHJcbiAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgcmVzLmpzb24ocmVzdWx0LnJvd3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG5hcHAuZ2V0KF9yb3V0ZXNVUkwgKyAnL2dldFJvdXRlJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgcmVzLmNvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi9qc29uJyk7XHJcbiAgZGIucXVlcnkoZ2V0Um91dGUsIFtyZXEucXVlcnkucl9pZF0sIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XHJcbiAgICBpZiAoZXJyKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTsgcmVzLnNlbmQoJ0Vycm9yICcgKyBlcnIpO1xyXG4gICAgfWVsc2Uge1xyXG4gICAgcmVzLmpzb24ocmVzdWx0LnJvd3MpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KTtcclxuXHJcbmFwcC5wdXQoX3JvdXRlc1VSTCArICcvdXBkYXRlUm91dGUnLCAocmVxLCByZXMsIG5leHQpID0+IHtcclxuICBkYi5xdWVyeSh1cGRhdGVSb3V0ZSxbcmVxLmJvZHkucm91dGVfbmFtZSwgcmVxLmJvZHkucm91dGVfZGVzY3JpcHRpb24scmVxLmJvZHkucm91dGVfYXJlYSwgcmVxLmJvZHkucm91dGVfaWRdLCAoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xyXG4gICAgaWYgKGVycikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycik7IHJlcy5zZW5kKCdFcnJvciAnICsgZXJyKTtcclxuICAgIH1lbHNlIHtcclxuICAgICAgZGIucXVlcnkoZ2V0QWxsUm91dGVzLCBudWxsLCAoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xyXG4gICAgICAgIGlmKGVycikge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpOyByZXMuc2VuZCgnRXJyb3IgJyArIGVycik7XHJcbiAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgcmVzLmpzb24ocmVzdWx0LnJvd3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuYXBwLmdldChfcm91dGVzVVJMICsgJy9nZXRCdXNMb2NhdGlvbicsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gIHJlcy5jb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicpO1xyXG4gIGRiLnF1ZXJ5KGdldEJ1c0xvY2F0aW9uLCBudWxsLCAoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xyXG4gICAgaWYgKGVycikge1xyXG4gICAgICAgIHJlcy5zZW5kKCdFcnJvciAnICsgZXJyKTtcclxuICAgIH1lbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcihyZXN1bHQucm93cyk7XHJcbiAgICAgIHJlcy5qc29uKHJlc3VsdC5yb3dzKTtcclxuICAgIH1cclxuICB9KTtcclxufSk7XHJcblxyXG59XHJcbiJdfQ==
