"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
var getAllRoutes = 'SELECT * FROM Route NATURAL JOIN routepath';
var getRoute = 'SELECT * FROM route NATURAL JOIN routepath WHERE route_id = $1';
var updateRoute = 'UPDATE Route SET route_name=$1, route_description=$2 WHERE route_id=$3';
var getBusLocation = 'SELECT gps_latitude, gps_longitude, bus_name FROM bus NATURAL JOIN gps WHERE bus_status=\'Active\'';
var countDriver = 'SELECT COUNT(*) FROM driver WHERE driver_status=\'Logged\'';
var countBus = 'SELECT COUNT(*) FROM bus WHERE bus_status=\'Active\'';
function routes(app) {
    var _routesURL = '/routes';
    app.get(_routesURL, function (req, res, next) {
        console.log('inside routes get');
        res.contentType('application/json');
        db.query(getAllRoutes, null, function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            else {
                res.json(result.rows);
            }
        });
    });
    app.get(_routesURL + '/countDriver', function (req, res, next) {
        console.log('inside routes get');
        res.contentType('application/json');
        db.query(countDriver, null, function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            else {
                res.json(result.rows[0].count);
            }
        });
    });
    app.get(_routesURL + '/countBus', function (req, res, next) {
        console.log('inside routes get');
        res.contentType('application/json');
        db.query(countBus, null, function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            else {
                res.json(result.rows[0].count);
            }
        });
    });
    app.get(_routesURL + '/getRoute', function (req, res, next) {
        res.contentType('application/json');
        db.query(getRoute, [req.query.r_id], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            else {
                res.json(result.rows);
            }
        });
    });
    app.put(_routesURL + '/updateRoute', function (req, res, next) {
        db.query(updateRoute, [req.body.route_name, req.body.route_description, req.body.route_id], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            else {
                db.query(getAllRoutes, null, function (err, result) {
                    if (err) {
                        console.error(err);
                        res.send('Error ' + err);
                    }
                    else {
                        res.json(result.rows);
                    }
                });
            }
        });
    });
    app.get(_routesURL + '/getBusLocation', function (req, res, next) {
        res.contentType('application/json');
        db.query(getBusLocation, null, function (err, result) {
            if (err) {
                res.send('Error ' + err);
            }
            else {
                res.json(result.rows);
            }
        });
    });
}
exports.routes = routes;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
