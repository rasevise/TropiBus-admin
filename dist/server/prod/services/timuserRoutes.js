"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
function userApp(app) {
    var _userURL = '/timuserRoutes';
    var getStopsFromRoute = 'SELECT * FROM route_stop NATURAL JOIN stop WHERE route_id=$1 ORDER BY stop_order';
    var getBusLocation = 'SELECT gps_latitude, gps_longitude, bus_name,bus_status FROM bus NATURAL JOIN gps WHERE route_id=$1';
    var getMessages = 'SELECT * FROM message';
    var getAllRoutes = 'SELECT * FROM route NATURAL JOIN routepath ORDER BY route_area';
    var getRouteStatus = 'SELECT route_id, bus_status from route NATURAL JOIN bus WHERE bus_status<>\'Inactive\'';
    app.get(_userURL + '/getAllRoutes', function (req, res, next) {
        console.log("entre a cojer todas las rutas");
        db.query(getAllRoutes, null, function (err, result) {
            if (err) {
                console.error(err);
                res.send("Error " + err);
            }
            else {
                db.query(getRouteStatus, null, function (err, result1) {
                    if (err) {
                        console.error(err);
                        res.send("Error " + err);
                    }
                    else {
                        console.log("coji el status de las rutas");
                        var results = result.rows;
                        var tempResults = result1.rows;
                        console.log("routes status result", tempResults);
                        if (tempResults.length == 0) {
                            for (var i = 0; i < results.length; i++) {
                                results[i].status = "Inactive";
                            }
                        }
                        else {
                            for (var i = 0; i < results.length; i++) {
                                var active = false;
                                for (var j = 0; j < tempResults.length; j++) {
                                    if (results[i].route_id == tempResults[j].route_id) {
                                        results[i].status = "Active";
                                        active = true;
                                        break;
                                    }
                                }
                                if (!active) {
                                    results[i].status = "Inactive";
                                }
                            }
                        }
                        res.json(results);
                    }
                });
            }
        });
    });
    app.get(_userURL + '/getStopsFromRoute', function (req, res, next) {
        console.log("cojer paradas de ruta especifica", req.query.route_id);
        db.query(getStopsFromRoute, [req.query.route_id], function (err, result) {
            if (err) {
                console.error(err);
                res.send("Error " + err);
            }
            else {
                res.json(result.rows);
            }
        });
    });
    app.get(_userURL + '/getBusLocation', function (req, res, next) {
        console.log("buscando localizacion de bus", req.query.route_id);
        db.query(getBusLocation, [req.query.route_id], function (err, result) {
            if (err) {
                console.error(err);
                res.send("Error " + err);
            }
            else {
                res.json(result.rows);
            }
        });
    });
    app.get(_userURL + '/getMessages', function (req, res, next) {
        console.log("getting messages");
        db.query(getMessages, null, function (err, result) {
            if (err) {
                console.error(err);
                res.send("Error " + err);
            }
            else {
                res.json(result.rows);
            }
        });
    });
}
exports.userApp = userApp;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
