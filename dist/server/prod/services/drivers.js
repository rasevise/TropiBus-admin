"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
function drivers(app) {
    var _driversURL = '/drivers';
    app.get(_driversURL, function (req, res, next) {
        console.log('getting messages from server: ');
        res.contentType('application/json');
        db.query('SELECT * FROM Driver ORDER BY driver_status', null, function (err, results) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.json(results.rows);
        });
    });
    app.post(_driversURL + '/addDriver', function (req, res, next) {
        var status = 'not logged';
        console.log('password:' + req.body.password);
        db.query('INSERT INTO driver( driver_firstname, driver_lastname, driver_username, driver_password, driver_status) VALUES ($1,$2,$3,$4,$5)', [req.body.name, req.body.lastName, req.body.username, req.body.password, status], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.send(result);
        });
    });
    app.put(_driversURL + '/updateDriver', function (req, res, next) {
        db.query('UPDATE driver SET driver_firstname = $2, driver_lastname = $3,  driver_username = $4, driver_password = $5 WHERE driver_id = $1', [req.body.id, req.body.name, req.body.lastName, req.body.username, req.body.password], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.send(result);
        });
    });
    app.delete(_driversURL + '/deleteDriver', function (req, res, next) {
        db.query('DELETE FROM driver WHERE driver_id = $1', [req.query.id], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            res.send(result);
        });
    });
}
exports.drivers = drivers;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LEtBQUssQ0FBQyx5Q0FBeUMsRUFBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBQyxHQUFPLEVBQUUsTUFBVTtZQUNyRixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNILE9BQU8sQ0FBQyxLQUFLLENBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ25CLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ2pDLENBQUM7WUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxDQUFDO0FBakRELDBCQWlEQyIsImZpbGUiOiJzZXJ2aWNlcy9kcml2ZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCAqIGFzIGRiIGZyb20gJy4uL2RiL3BnJztcblxuZXhwb3J0IGZ1bmN0aW9uIGRyaXZlcnMoYXBwOiBleHByZXNzLkFwcGxpY2F0aW9uKSB7XG5cbmxldCBfZHJpdmVyc1VSTCA9ICcvZHJpdmVycyc7XG5cbmFwcC5nZXQoX2RyaXZlcnNVUkwsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICBjb25zb2xlLmxvZygnZ2V0dGluZyBtZXNzYWdlcyBmcm9tIHNlcnZlcjogJyk7XG4gIHJlcy5jb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicpO1xuICBkYi5xdWVyeSgnU0VMRUNUICogRlJPTSBEcml2ZXIgT1JERVIgQlkgZHJpdmVyX3N0YXR1cycsIG51bGwsIChlcnI6YW55LCByZXN1bHRzOmFueSkgPT4ge1xuICAgIGlmKGVycikge1xuICAgICAgICAgICBjb25zb2xlLmVycm9yKCBlcnIpO1xuICAgICAgICAgICAgcmVzLnNlbmQoJ0Vycm9yICcgKyBlcnIpO1xuICAgIH1cbiAgICByZXMuanNvbihyZXN1bHRzLnJvd3MpO1xuICB9KTtcbn0pO1xuXG5hcHAucG9zdChfZHJpdmVyc1VSTCArICcvYWRkRHJpdmVyJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIHZhciBzdGF0dXMgPSAnbm90IGxvZ2dlZCc7XG4gIGNvbnNvbGUubG9nKCdwYXNzd29yZDonICsgcmVxLmJvZHkucGFzc3dvcmQpO1xuICBkYi5xdWVyeSgnSU5TRVJUIElOVE8gZHJpdmVyKCBkcml2ZXJfZmlyc3RuYW1lLCBkcml2ZXJfbGFzdG5hbWUsIGRyaXZlcl91c2VybmFtZSwgZHJpdmVyX3Bhc3N3b3JkLCBkcml2ZXJfc3RhdHVzKSBWQUxVRVMgKCQxLCQyLCQzLCQ0LCQ1KScsIFtyZXEuYm9keS5uYW1lLHJlcS5ib2R5Lmxhc3ROYW1lLHJlcS5ib2R5LnVzZXJuYW1lLHJlcS5ib2R5LnBhc3N3b3JkLCBzdGF0dXNdLCAoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xuICAgIGlmKGVycikge1xuICAgICAgICAgICBjb25zb2xlLmVycm9yKCBlcnIpO1xuICAgICAgICAgICAgcmVzLnNlbmQoJ0Vycm9yICcgKyBlcnIpO1xuICAgIH1cbiAgICByZXMuc2VuZChyZXN1bHQpO1xuICB9KTtcbn0pO1xuXG5hcHAucHV0KF9kcml2ZXJzVVJMICsgJy91cGRhdGVEcml2ZXInLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgZGIucXVlcnkoJ1VQREFURSBkcml2ZXIgU0VUIGRyaXZlcl9maXJzdG5hbWUgPSAkMiwgZHJpdmVyX2xhc3RuYW1lID0gJDMsICBkcml2ZXJfdXNlcm5hbWUgPSAkNCwgZHJpdmVyX3Bhc3N3b3JkID0gJDUgV0hFUkUgZHJpdmVyX2lkID0gJDEnLCBbcmVxLmJvZHkuaWQsIHJlcS5ib2R5Lm5hbWUsIHJlcS5ib2R5Lmxhc3ROYW1lLCByZXEuYm9keS51c2VybmFtZSwgcmVxLmJvZHkucGFzc3dvcmRdLCAoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgY29uc29sZS5lcnJvciggZXJyKTtcbiAgICAgICAgICAgIHJlcy5zZW5kKCdFcnJvciAnICsgZXJyKTtcbiAgICB9XG4gICAgcmVzLnNlbmQocmVzdWx0KTtcbiAgfSk7XG59KTtcblxuXG5hcHAuZGVsZXRlKF9kcml2ZXJzVVJMICsgJy9kZWxldGVEcml2ZXInLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgZGIucXVlcnkoJ0RFTEVURSBGUk9NIGRyaXZlciBXSEVSRSBkcml2ZXJfaWQgPSAkMScsW3JlcS5xdWVyeS5pZF0sIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgICAgICBjb25zb2xlLmVycm9yKCBlcnIpO1xuICAgICAgICAgICAgcmVzLnNlbmQoJ0Vycm9yICcgKyBlcnIpO1xuICAgIH1cbiAgICByZXMuc2VuZChyZXN1bHQpO1xuICB9KTtcbn0pO1xuXG59XG4iXX0=
