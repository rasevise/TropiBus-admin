"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
function drivers(app) {
    var _driversURL = '/drivers';
    app.get(_driversURL, function (req, res, next) {
        console.log('getting messages from server: ');
        res.contentType('application/json');
        db.query('SELECT * FROM Driver ORDER BY driver_status', null, function (err, results) {
            if (err) {
                res.send(err);
            }
            res.json(results.rows);
        });
    });
    app.post(_driversURL + '/addDriver', function (req, res, next) {
        var status = 'not logged';
        console.log('password:' + req.body.password);
        db.query('INSERT INTO driver( driver_firstname, driver_lastname, driver_username, driver_password, driver_status) VALUES ($1,$2,$3,$4,$5)', [req.body.name, req.body.lastName, req.body.username, req.body.password, status], function (err, result) {
            if (err) {
                res.send(err);
            }
            res.send(result);
        });
    });
    app.put(_driversURL + '/updateDriver', function (req, res, next) {
        db.query('UPDATE driver SET driver_firstname = $2, driver_lastname = $3,  driver_username = $4, driver_password = $5 WHERE driver_id = $1', [req.body.id, req.body.name, req.body.lastName, req.body.username, req.body.password], function (err, result) {
            if (err) {
                return console.error('error running query', err);
            }
            res.send(result);
        });
    });
    app.delete(_driversURL + '/deleteDriver', function (req, res, next) {
        db.query('DELETE FROM driver WHERE driver_id = $1', [req.query.id], function (err, result) {
            if (err) {
                return console.error('error running query', err);
            }
            res.send(result);
        });
    });
}
exports.drivers = drivers;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNuRCxDQUFDO1lBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsQ0FBQztBQTdDRCwwQkE2Q0MiLCJmaWxlIjoic2VydmljZXMvZHJpdmVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgKiBhcyBkYiBmcm9tICcuLi9kYi9wZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkcml2ZXJzKGFwcDogZXhwcmVzcy5BcHBsaWNhdGlvbikge1xuXG5sZXQgX2RyaXZlcnNVUkwgPSAnL2RyaXZlcnMnO1xuXG5hcHAuZ2V0KF9kcml2ZXJzVVJMLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgY29uc29sZS5sb2coJ2dldHRpbmcgbWVzc2FnZXMgZnJvbSBzZXJ2ZXI6ICcpO1xuICByZXMuY29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgZGIucXVlcnkoJ1NFTEVDVCAqIEZST00gRHJpdmVyIE9SREVSIEJZIGRyaXZlcl9zdGF0dXMnLCBudWxsLCAoZXJyOmFueSwgcmVzdWx0czphbnkpID0+IHtcbiAgICBpZihlcnIpIHtcbiAgICAgIHJlcy5zZW5kKGVycik7XG4gICAgfVxuICAgIHJlcy5qc29uKHJlc3VsdHMucm93cyk7XG4gIH0pO1xufSk7XG5cbmFwcC5wb3N0KF9kcml2ZXJzVVJMICsgJy9hZGREcml2ZXInLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgdmFyIHN0YXR1cyA9ICdub3QgbG9nZ2VkJztcbiAgY29uc29sZS5sb2coJ3Bhc3N3b3JkOicgKyByZXEuYm9keS5wYXNzd29yZCk7XG4gIGRiLnF1ZXJ5KCdJTlNFUlQgSU5UTyBkcml2ZXIoIGRyaXZlcl9maXJzdG5hbWUsIGRyaXZlcl9sYXN0bmFtZSwgZHJpdmVyX3VzZXJuYW1lLCBkcml2ZXJfcGFzc3dvcmQsIGRyaXZlcl9zdGF0dXMpIFZBTFVFUyAoJDEsJDIsJDMsJDQsJDUpJywgW3JlcS5ib2R5Lm5hbWUscmVxLmJvZHkubGFzdE5hbWUscmVxLmJvZHkudXNlcm5hbWUscmVxLmJvZHkucGFzc3dvcmQsIHN0YXR1c10sIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XG4gICAgaWYoZXJyKSB7XG4gICAgICByZXMuc2VuZChlcnIpO1xuICAgIH1cbiAgICByZXMuc2VuZChyZXN1bHQpO1xuICB9KTtcbn0pO1xuXG5hcHAucHV0KF9kcml2ZXJzVVJMICsgJy91cGRhdGVEcml2ZXInLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgZGIucXVlcnkoJ1VQREFURSBkcml2ZXIgU0VUIGRyaXZlcl9maXJzdG5hbWUgPSAkMiwgZHJpdmVyX2xhc3RuYW1lID0gJDMsICBkcml2ZXJfdXNlcm5hbWUgPSAkNCwgZHJpdmVyX3Bhc3N3b3JkID0gJDUgV0hFUkUgZHJpdmVyX2lkID0gJDEnLCBbcmVxLmJvZHkuaWQsIHJlcS5ib2R5Lm5hbWUsIHJlcS5ib2R5Lmxhc3ROYW1lLCByZXEuYm9keS51c2VybmFtZSwgcmVxLmJvZHkucGFzc3dvcmRdLCAoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKCdlcnJvciBydW5uaW5nIHF1ZXJ5JywgZXJyKTtcbiAgICB9XG4gICAgcmVzLnNlbmQocmVzdWx0KTtcbiAgfSk7XG59KTtcblxuXG5hcHAuZGVsZXRlKF9kcml2ZXJzVVJMICsgJy9kZWxldGVEcml2ZXInLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgZGIucXVlcnkoJ0RFTEVURSBGUk9NIGRyaXZlciBXSEVSRSBkcml2ZXJfaWQgPSAkMScsW3JlcS5xdWVyeS5pZF0sIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoJ2Vycm9yIHJ1bm5pbmcgcXVlcnknLCBlcnIpO1xuICAgIH1cbiAgICByZXMuc2VuZChyZXN1bHQpO1xuICB9KTtcbn0pO1xuXG59XG4iXX0=
