"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
var jwt = require("jsonwebtoken");
var checkCredentials = 'SELECT admin_id FROM administrator WHERE admin_username=$1 and admin_password=$2';
var setStatus = 'UPDATE administrator SET admin_status=$1 WHERE admin_id=$2';
function login(app) {
    var token = jwt.sign({ token: 'tropitoken' }, 'tropi');
    var admin;
    app.post("/login/authenticate", function (req, res) {
        db.query(checkCredentials, [req.body.username, req.body.password], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error' + err);
            }
            else {
                if (result.rows.length === 0) {
                    res.status(400).send({
                        message: 'Incorrect Credentials'
                    });
                }
                else {
                    admin = result.rows[0].admin_id;
                    console.log(admin);
                    db.query(setStatus, [true, admin], function (err, result) {
                        if (err) {
                            console.error(err);
                            res.send('Error' + err);
                        }
                    });
                    res.json({ admin: admin, token: token });
                }
            }
        });
    });
    app.put("/login/logout", function (req, res) {
        db.query(setStatus, [false, req.body.id], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error' + err);
            }
            else {
                res.json({ 'result': "logout" });
            }
        });
    });
}
exports.login = login;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2xvZ2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsNkJBQStCO0FBQy9CLGtDQUFvQztBQUVwQyxJQUFJLGdCQUFnQixHQUFFLGtGQUFrRixDQUFDO0FBQ3pHLElBQUksU0FBUyxHQUFHLDREQUE0RCxDQUFDO0FBRTdFLGVBQXNCLEdBQXdCO0lBRTlDLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdEQsSUFBSSxLQUFLLENBQUM7SUFFVixHQUFHLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLFVBQUMsR0FBTyxFQUFFLEdBQU87UUFDL0MsRUFBRSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsVUFBQyxHQUFPLEVBQUUsTUFBVTtZQUNwRixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNOLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ25CLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQzVCLENBQUM7WUFBQSxJQUFJLENBQUMsQ0FBQztnQkFDSCxFQUFFLENBQUEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN4QixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQzt3QkFDbkIsT0FBTyxFQUFFLHVCQUF1QjtxQkFDakMsQ0FBQyxDQUFDO2dCQUNQLENBQUM7Z0JBQUEsSUFBSSxDQUFDLENBQUM7b0JBQ0gsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO29CQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNuQixFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxVQUFDLEdBQU8sRUFBRSxNQUFVO3dCQUNsRCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOzRCQUNOLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7NEJBQ25CLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDO3dCQUM1QixDQUFDO29CQUNMLENBQUMsQ0FBQyxDQUFDO29CQUNILEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBQyxLQUFLLE9BQUEsRUFBRSxLQUFLLE9BQUEsRUFBQyxDQUFDLENBQUM7Z0JBQzdCLENBQUM7WUFDTCxDQUFDO1FBQ0QsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLFVBQUMsR0FBTyxFQUFFLEdBQU87UUFDeEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFDLEdBQU8sRUFBRSxNQUFVO1lBQzNELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbkIsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDNUIsQ0FBQztZQUFBLElBQUksQ0FBQyxDQUFDO2dCQUNILEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBQyxRQUFRLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQztZQUNuQyxDQUFDO1FBQ0QsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUVILENBQUM7QUExQ0Qsc0JBMENDIiwiZmlsZSI6InNlcnZpY2VzL2xvZ2luLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcclxuaW1wb3J0ICogYXMgZGIgZnJvbSAnLi4vZGIvcGcnO1xyXG5pbXBvcnQgKiBhcyBqd3QgZnJvbSAnanNvbndlYnRva2VuJztcclxuXHJcbnZhciBjaGVja0NyZWRlbnRpYWxzPSAnU0VMRUNUIGFkbWluX2lkIEZST00gYWRtaW5pc3RyYXRvciBXSEVSRSBhZG1pbl91c2VybmFtZT0kMSBhbmQgYWRtaW5fcGFzc3dvcmQ9JDInO1xyXG52YXIgc2V0U3RhdHVzID0gJ1VQREFURSBhZG1pbmlzdHJhdG9yIFNFVCBhZG1pbl9zdGF0dXM9JDEgV0hFUkUgYWRtaW5faWQ9JDInO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvZ2luKGFwcDogZXhwcmVzcy5BcHBsaWNhdGlvbikge1xyXG4vLyBzaWduIHdpdGggZGVmYXVsdCAoSE1BQyBTSEEyNTYpXHJcbnZhciB0b2tlbiA9IGp3dC5zaWduKHsgdG9rZW46ICd0cm9waXRva2VuJ30sICd0cm9waScpO1xyXG52YXIgYWRtaW47XHJcbi8vTWV0aG9kIHRvIHZhbGlkYXRlIExvZ2luIGluZm8gd2l0aCBkYlxyXG5hcHAucG9zdChgL2xvZ2luL2F1dGhlbnRpY2F0ZWAsIChyZXE6YW55LCByZXM6YW55KSA9PiB7XHJcbiAgZGIucXVlcnkoY2hlY2tDcmVkZW50aWFscyxbcmVxLmJvZHkudXNlcm5hbWUsIHJlcS5ib2R5LnBhc3N3b3JkXSAsKGVycjphbnksIHJlc3VsdDphbnkpID0+IHtcclxuICAgIGlmIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgcmVzLnNlbmQoJ0Vycm9yJyArIGVycik7XHJcbiAgICB9ZWxzZSB7XHJcbiAgICAgICAgaWYocmVzdWx0LnJvd3MubGVuZ3RoPT09MCkge1xyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDQwMCkuc2VuZCh7XHJcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ0luY29ycmVjdCBDcmVkZW50aWFscydcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICBhZG1pbiA9IHJlc3VsdC5yb3dzWzBdLmFkbWluX2lkO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhZG1pbik7XHJcbiAgICAgICAgICAgIGRiLnF1ZXJ5KHNldFN0YXR1cyxbdHJ1ZSwgYWRtaW5dICwoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXMuc2VuZCgnRXJyb3InICsgZXJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJlcy5qc29uKHthZG1pbiwgdG9rZW59KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB9KTtcclxuXHJcbn0pO1xyXG5cclxuYXBwLnB1dChgL2xvZ2luL2xvZ291dGAsIChyZXE6YW55LCByZXM6YW55KSA9PiB7XHJcbiAgZGIucXVlcnkoc2V0U3RhdHVzLFtmYWxzZSwgcmVxLmJvZHkuaWRdICwoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xyXG4gICAgaWYgKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICByZXMuc2VuZCgnRXJyb3InICsgZXJyKTtcclxuICAgIH1lbHNlIHtcclxuICAgICAgICByZXMuanNvbih7J3Jlc3VsdCc6IFwibG9nb3V0XCJ9KTtcclxuICAgIH1cclxuICAgIH0pO1xyXG59KTtcclxuXHJcbn1cclxuIl19
