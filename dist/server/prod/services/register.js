"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
var createAdmin = 'INSERT INTO administrator(admin_first_name, admin_last_name, admin_username, admin_password) VALUES ($1,$2,$3,$4)';
var getAdmin = 'SELECT * FROM administrator WHERE admin_id=$1';
var getAdmins = 'SELECT * FROM administrator';
var updateAdmin = 'UPDATE administrator SET admin_first_name=$1, admin_last_name=$2, admin_email=$4 WHERE admin_id=$3';
var setPassword = 'UPDATE administrator SET admin_password=$1, admin_pass=$2 WHERE admin_id=$3';
var updatePassword = 'UPDATE administrator SET admin_password=$1, admin_pass=$2 WHERE admin_id=$3 AND admin_password=$4';
function register(app) {
    var admin;
    app.get('/register/getAdmin', function (req, res, next) {
        res.contentType('application/json');
        db.query(getAdmin, [req.query.id], function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err);
            }
            else {
                res.json(result.rows[0]);
            }
        });
    });
    app.get('/register/getAdmins', function (req, res, next) {
        res.contentType('application/json');
        db.query(getAdmins, null, function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err);
            }
            else {
                res.json(result.rows);
            }
        });
    });
    app.post("/register", function (req, res) {
        db.query(createAdmin, [req.body.name, req.body.last, req.body.username, req.body.password], function (err, result) {
            if (err) {
                console.error("Error: " + err.code);
                res.send(err.code);
            }
            else {
                res.json(result);
            }
        });
    });
    app.put("/register/update", function (req, res) {
        db.query(updateAdmin, [req.body.name, req.body.last, req.body.id, req.body.email], function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err.code);
            }
            else {
                res.json(result.rows);
            }
        });
    });
    app.put("/register/setPassword", function (req, res) {
        db.query(setPassword, [req.body.password, false, req.body.id], function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err.code);
            }
            else {
                res.json(result);
            }
        });
    });
    app.put("/register/updatePassword", function (req, res) {
        db.query(updatePassword, [req.body.password, false, req.body.id, req.body.oldpassword], function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err.code);
            }
            else {
                console.log(result);
                res.json(result);
            }
        });
    });
}
exports.register = register;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
