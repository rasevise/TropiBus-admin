"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
var createAdmin = 'INSERT INTO administrator(admin_first_name, admin_last_name, admin_username, admin_password) VALUES ($1,$2,$3,$4)';
var getAdmin = 'SELECT admin_id, admin_email, admin_status, admin_pass, admin_first_name, admin_last_name, admin_username FROM administrator WHERE admin_id=$1';
var getAdmins = 'SELECT admin_id, admin_email, admin_status, admin_pass, admin_first_name, admin_last_name, admin_username FROM administrator';
var getAdminFromUser = 'SELECT admin_status FROM administrator WHERE admin_username=$1';
var updateAdmin = 'UPDATE administrator SET admin_first_name=$1, admin_last_name=$2, admin_email=$4 WHERE admin_id=$3';
var setPassword = 'UPDATE administrator SET admin_password=$1, admin_pass=$2 WHERE admin_id=$3';
var updatePassword = 'UPDATE administrator SET admin_password=$1, admin_pass=$2 WHERE admin_id=$3';
var getPass = 'SELECT admin_id FROM administrator WHERE admin_id=$1 AND admin_password=$2';
function register(app) {
    var admin;
    app.get('/register/getAdmin', function (req, res, next) {
        res.contentType('application/json');
        db.query(getAdmin, [req.query.id], function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err);
            }
            else {
                res.json(result.rows[0]);
            }
        });
    });
    app.get('/register/getAdminFromUser', function (req, res, next) {
        res.contentType('application/json');
        db.query(getAdminFromUser, [req.query.user], function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err);
            }
            else {
                res.json(result.rows[0]);
            }
        });
    });
    app.get('/register/getAdmins', function (req, res, next) {
        res.contentType('application/json');
        db.query(getAdmins, null, function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err);
            }
            else {
                res.json(result.rows);
            }
        });
    });
    app.post("/register", function (req, res) {
        db.query(createAdmin, [req.body.name, req.body.last, req.body.username, req.body.password], function (err, result) {
            if (err) {
                console.error("Error: " + err.code);
                res.send(err.code);
            }
            else {
                res.json(result);
            }
        });
    });
    app.put("/register/update", function (req, res) {
        db.query(updateAdmin, [req.body.name, req.body.last, req.body.id, req.body.email], function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err.code);
            }
            else {
                res.json(result.rows);
            }
        });
    });
    app.put("/register/setPassword", function (req, res) {
        db.query(setPassword, [req.body.password, false, req.body.id], function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err.code);
            }
            else {
                res.json(result);
            }
        });
    });
    app.put("/register/updatePassword", function (req, res) {
        db.query(getPass, [req.body.id, req.body.oldpassword], function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err.code);
            }
            else {
                if (result.rows.length !== 0) {
                    db.query(updatePassword, [req.body.password, false, req.body.id], function (err, result1) {
                        if (err) {
                            console.error("Error: " + err);
                            res.send(err.code);
                        }
                        else {
                            res.json({ "response": true });
                        }
                    });
                }
                else {
                    res.json({ "response": false });
                }
            }
        });
    });
}
exports.register = register;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL3JlZ2lzdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsNkJBQStCO0FBRS9CLElBQUksV0FBVyxHQUFHLG1IQUFtSCxDQUFDO0FBQ3RJLElBQUksUUFBUSxHQUFFLGdKQUFnSixDQUFDO0FBQy9KLElBQUksU0FBUyxHQUFFLDhIQUE4SCxDQUFDO0FBQzlJLElBQUksZ0JBQWdCLEdBQUUsZ0VBQWdFLENBQUM7QUFDdkYsSUFBSSxXQUFXLEdBQUcsb0dBQW9HLENBQUM7QUFDdkgsSUFBSSxXQUFXLEdBQUcsNkVBQTZFLENBQUM7QUFDaEcsSUFBSSxjQUFjLEdBQUcsNkVBQTZFLENBQUM7QUFDbkcsSUFBSSxPQUFPLEdBQUcsNEVBQTRFLENBQUM7QUFFM0Ysa0JBQXlCLEdBQXdCO0lBQ2pELElBQUksS0FBSyxDQUFDO0lBRVYsR0FBRyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxVQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtRQUN6QyxHQUFHLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDcEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQUMsR0FBTyxFQUFFLE1BQVU7WUFDbkQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDTixPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFDL0IsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNsQixDQUFDO1lBQUEsSUFBSSxDQUFDLENBQUM7Z0JBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0IsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxHQUFHLENBQUMsR0FBRyxDQUFDLDRCQUE0QixFQUFFLFVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO1FBQ2pELEdBQUcsQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNwQyxFQUFFLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFDLEdBQU8sRUFBRSxNQUFVO1lBQzdELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQy9CLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbEIsQ0FBQztZQUFBLElBQUksQ0FBQyxDQUFDO2dCQUNILEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxVQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtRQUMxQyxHQUFHLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDcEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFVBQUMsR0FBTyxFQUFFLE1BQVU7WUFDMUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDTixPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFDL0IsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNsQixDQUFDO1lBQUEsSUFBSSxDQUFDLENBQUM7Z0JBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDMUIsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFHSCxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFDLEdBQU8sRUFBRSxHQUFPO1FBQ3JDLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxVQUFDLEdBQU8sRUFBRSxNQUFVO1lBQzdHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNwQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2QixDQUFDO1lBQUEsSUFBSSxDQUFDLENBQUM7Z0JBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNyQixDQUFDO1FBQ0QsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsVUFBQyxHQUFPLEVBQUUsR0FBTztRQUN6QyxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsVUFBQyxHQUFPLEVBQUUsTUFBVTtZQUNsRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFDO2dCQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUFDO2dCQUMvQixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2QixDQUFDO1lBQUEsSUFBSSxDQUFDLENBQUM7Z0JBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDMUIsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxHQUFHLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLFVBQUMsR0FBTyxFQUFFLEdBQU87UUFDOUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFDLEdBQU8sRUFBRSxNQUFVO1lBQzlFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUM7Z0JBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQy9CLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZCLENBQUM7WUFBQSxJQUFJLENBQUMsQ0FBQztnQkFDSCxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3JCLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsRUFBRSxVQUFDLEdBQU8sRUFBRSxHQUFPO1FBRWpELEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxVQUFDLEdBQU8sRUFBRSxNQUFVO1lBQ3RFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUM7Z0JBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQy9CLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZCLENBQUM7WUFBQSxJQUFJLENBQUMsQ0FBQztnQkFDSCxFQUFFLENBQUEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQSxDQUFDO29CQUM3QixFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQUMsR0FBTyxFQUFFLE9BQVc7d0JBQ2xGLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUM7NEJBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLENBQUM7NEJBQy9CLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUN2QixDQUFDO3dCQUFBLElBQUksQ0FBQyxDQUFDOzRCQUNILEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBQyxVQUFVLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQTt3QkFDL0IsQ0FBQztvQkFDTCxDQUFDLENBQUMsQ0FBQztnQkFBQSxDQUFDO2dCQUNKLElBQUksQ0FBQSxDQUFDO29CQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBQyxVQUFVLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQTtnQkFDaEMsQ0FBQztZQUNMLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUVQLENBQUMsQ0FBQyxDQUFDO0FBRUgsQ0FBQztBQWpHRCw0QkFpR0MiLCJmaWxlIjoic2VydmljZXMvcmVnaXN0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgKiBhcyBkYiBmcm9tICcuLi9kYi9wZyc7XHJcblxyXG52YXIgY3JlYXRlQWRtaW4gPSAnSU5TRVJUIElOVE8gYWRtaW5pc3RyYXRvcihhZG1pbl9maXJzdF9uYW1lLCBhZG1pbl9sYXN0X25hbWUsIGFkbWluX3VzZXJuYW1lLCBhZG1pbl9wYXNzd29yZCkgVkFMVUVTICgkMSwkMiwkMywkNCknO1xyXG52YXIgZ2V0QWRtaW49ICdTRUxFQ1QgYWRtaW5faWQsIGFkbWluX2VtYWlsLCBhZG1pbl9zdGF0dXMsIGFkbWluX3Bhc3MsIGFkbWluX2ZpcnN0X25hbWUsIGFkbWluX2xhc3RfbmFtZSwgYWRtaW5fdXNlcm5hbWUgRlJPTSBhZG1pbmlzdHJhdG9yIFdIRVJFIGFkbWluX2lkPSQxJztcclxudmFyIGdldEFkbWlucz0gJ1NFTEVDVCBhZG1pbl9pZCwgYWRtaW5fZW1haWwsIGFkbWluX3N0YXR1cywgYWRtaW5fcGFzcywgYWRtaW5fZmlyc3RfbmFtZSwgYWRtaW5fbGFzdF9uYW1lLCBhZG1pbl91c2VybmFtZSBGUk9NIGFkbWluaXN0cmF0b3InO1xyXG52YXIgZ2V0QWRtaW5Gcm9tVXNlcj0gJ1NFTEVDVCBhZG1pbl9zdGF0dXMgRlJPTSBhZG1pbmlzdHJhdG9yIFdIRVJFIGFkbWluX3VzZXJuYW1lPSQxJztcclxudmFyIHVwZGF0ZUFkbWluID0gJ1VQREFURSBhZG1pbmlzdHJhdG9yIFNFVCBhZG1pbl9maXJzdF9uYW1lPSQxLCBhZG1pbl9sYXN0X25hbWU9JDIsIGFkbWluX2VtYWlsPSQ0IFdIRVJFIGFkbWluX2lkPSQzJztcclxudmFyIHNldFBhc3N3b3JkID0gJ1VQREFURSBhZG1pbmlzdHJhdG9yIFNFVCBhZG1pbl9wYXNzd29yZD0kMSwgYWRtaW5fcGFzcz0kMiBXSEVSRSBhZG1pbl9pZD0kMyc7XHJcbnZhciB1cGRhdGVQYXNzd29yZCA9ICdVUERBVEUgYWRtaW5pc3RyYXRvciBTRVQgYWRtaW5fcGFzc3dvcmQ9JDEsIGFkbWluX3Bhc3M9JDIgV0hFUkUgYWRtaW5faWQ9JDMnO1xyXG52YXIgZ2V0UGFzcyA9ICdTRUxFQ1QgYWRtaW5faWQgRlJPTSBhZG1pbmlzdHJhdG9yIFdIRVJFIGFkbWluX2lkPSQxIEFORCBhZG1pbl9wYXNzd29yZD0kMic7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXIoYXBwOiBleHByZXNzLkFwcGxpY2F0aW9uKSB7XHJcbnZhciBhZG1pbjtcclxuXHJcbmFwcC5nZXQoJy9yZWdpc3Rlci9nZXRBZG1pbicsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gICAgcmVzLmNvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi9qc29uJyk7XHJcbiAgICBkYi5xdWVyeShnZXRBZG1pbiwgW3JlcS5xdWVyeS5pZF0sIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XHJcbiAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyKTtcclxuICAgICAgICAgICAgcmVzLnNlbmQoZXJyKTtcclxuICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3VsdC5yb3dzWzBdKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG5hcHAuZ2V0KCcvcmVnaXN0ZXIvZ2V0QWRtaW5Gcm9tVXNlcicsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gICAgcmVzLmNvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi9qc29uJyk7XHJcbiAgICBkYi5xdWVyeShnZXRBZG1pbkZyb21Vc2VyLCBbcmVxLnF1ZXJ5LnVzZXJdLCAoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xyXG4gICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yOiBcIiArIGVycik7XHJcbiAgICAgICAgICAgIHJlcy5zZW5kKGVycik7XHJcbiAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICByZXMuanNvbihyZXN1bHQucm93c1swXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuYXBwLmdldCgnL3JlZ2lzdGVyL2dldEFkbWlucycsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gICAgcmVzLmNvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi9qc29uJyk7XHJcbiAgICBkYi5xdWVyeShnZXRBZG1pbnMsIG51bGwsIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XHJcbiAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyKTtcclxuICAgICAgICAgICAgcmVzLnNlbmQoZXJyKTtcclxuICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3VsdC5yb3dzKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG4vL01ldGhvZCB0byB2YWxpZGF0ZSBMb2dpbiBpbmZvIHdpdGggZGJcclxuYXBwLnBvc3QoYC9yZWdpc3RlcmAsIChyZXE6YW55LCByZXM6YW55KSA9PiB7XHJcbiAgZGIucXVlcnkoY3JlYXRlQWRtaW4sW3JlcS5ib2R5Lm5hbWUsIHJlcS5ib2R5Lmxhc3QsIHJlcS5ib2R5LnVzZXJuYW1lLCByZXEuYm9keS5wYXNzd29yZF0gLChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XHJcbiAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yOiBcIiArIGVyci5jb2RlKTtcclxuICAgICAgICByZXMuc2VuZChlcnIuY29kZSk7XHJcbiAgICB9ZWxzZSB7XHJcbiAgICAgICAgcmVzLmpzb24ocmVzdWx0KTtcclxuICAgIH1cclxuICAgIH0pO1xyXG59KTtcclxuXHJcbmFwcC5wdXQoYC9yZWdpc3Rlci91cGRhdGVgLCAocmVxOmFueSwgcmVzOmFueSkgPT4ge1xyXG4gICAgZGIucXVlcnkodXBkYXRlQWRtaW4sW3JlcS5ib2R5Lm5hbWUsIHJlcS5ib2R5Lmxhc3QsIHJlcS5ib2R5LmlkLCByZXEuYm9keS5lbWFpbF0gLChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XHJcbiAgICAgICAgaWYgKGVycil7IFxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyKTtcclxuICAgICAgICAgICAgcmVzLnNlbmQoZXJyLmNvZGUpO1xyXG4gICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgcmVzLmpzb24ocmVzdWx0LnJvd3MpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KTtcclxuXHJcbmFwcC5wdXQoYC9yZWdpc3Rlci9zZXRQYXNzd29yZGAsIChyZXE6YW55LCByZXM6YW55KSA9PiB7XHJcbiAgICBkYi5xdWVyeShzZXRQYXNzd29yZCxbcmVxLmJvZHkucGFzc3dvcmQsIGZhbHNlLCByZXEuYm9keS5pZF0gLChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XHJcbiAgICAgICAgaWYgKGVycil7IFxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyKTtcclxuICAgICAgICAgICAgcmVzLnNlbmQoZXJyLmNvZGUpO1xyXG4gICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgcmVzLmpzb24ocmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG5hcHAucHV0KGAvcmVnaXN0ZXIvdXBkYXRlUGFzc3dvcmRgLCAocmVxOmFueSwgcmVzOmFueSkgPT4ge1xyXG5cclxuICAgIGRiLnF1ZXJ5KGdldFBhc3MsW3JlcS5ib2R5LmlkLCByZXEuYm9keS5vbGRwYXNzd29yZF0gLChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XHJcbiAgICAgICAgaWYgKGVycil7IFxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyKTsgXHJcbiAgICAgICAgICAgIHJlcy5zZW5kKGVyci5jb2RlKTtcclxuICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgIGlmKHJlc3VsdC5yb3dzLmxlbmd0aCAhPT0gMCl7XHJcbiAgICAgICAgICAgIGRiLnF1ZXJ5KHVwZGF0ZVBhc3N3b3JkLFtyZXEuYm9keS5wYXNzd29yZCwgZmFsc2UsIHJlcS5ib2R5LmlkXSAsKGVycjphbnksIHJlc3VsdDE6YW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKXsgXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yOiBcIiArIGVycik7IFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5zZW5kKGVyci5jb2RlKTtcclxuICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMuanNvbih7XCJyZXNwb25zZVwiOnRydWV9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTt9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICByZXMuanNvbih7XCJyZXNwb25zZVwiOmZhbHNlfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxufSk7XHJcblxyXG59XHJcbiJdfQ==
