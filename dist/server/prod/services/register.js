"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
var createAdmin = 'INSERT INTO administrator(admin_first_name, admin_last_name, admin_username, admin_password, admin_email) VALUES ($1,$2,$3,CRYPT($4,GEN_SALT(\'bf\')),$5)';
var getAdmin = 'SELECT admin_id, admin_email, admin_status, admin_pass, admin_first_name, admin_last_name, admin_username FROM administrator WHERE admin_id=$1';
var getAdmins = 'SELECT admin_id, admin_email, admin_status, admin_pass, admin_first_name, admin_last_name, admin_username FROM administrator';
var getAdminFromUser = 'SELECT admin_status, admin_pass FROM administrator WHERE admin_username=$1';
var updateAdmin = 'UPDATE administrator SET admin_first_name=$1, admin_last_name=$2, admin_email=$4 WHERE admin_id=$3';
var setPassword = 'UPDATE administrator SET admin_password=CRYPT($1,GEN_SALT(\'bf\')), admin_pass=$2 WHERE admin_id=$3';
var updatePassword = 'UPDATE administrator SET admin_password=CRYPT($1,GEN_SALT(\'bf\')), admin_pass=$2 WHERE admin_id=$3';
var getPass = 'SELECT admin_id FROM administrator WHERE admin_id=$1 AND admin_password=CRYPT($2,admin_password)';
function register(app) {
    var admin;
    app.get('/register/getAdmin', function (req, res, next) {
        res.contentType('application/json');
        db.query(getAdmin, [req.query.id], function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err);
            }
            else {
                console.log(result.rows[0]);
                res.json(result.rows[0]);
            }
        });
    });
    app.get('/register/getAdminFromUser', function (req, res, next) {
        res.contentType('application/json');
        db.query(getAdminFromUser, [req.query.user], function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err);
            }
            else {
                console.log(result.rows[0]);
                res.json(result.rows[0]);
            }
        });
    });
    app.get('/register/getAdmins', function (req, res, next) {
        res.contentType('application/json');
        db.query(getAdmins, null, function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err);
            }
            else {
                res.json(result.rows);
            }
        });
    });
    app.post("/register", function (req, res) {
        db.query(createAdmin, [req.body.name, req.body.last, req.body.username, req.body.password, req.body.email], function (err, result) {
            if (err) {
                console.error("Error: " + err.code);
                res.send(err.code);
            }
            else {
                res.json(result);
            }
        });
    });
    app.put("/register/update", function (req, res) {
        db.query(updateAdmin, [req.body.name, req.body.last, req.body.id, req.body.email], function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err.code);
            }
            else {
                res.json(result.rows);
            }
        });
    });
    app.put("/register/setPassword", function (req, res) {
        db.query(setPassword, [req.body.password, false, req.body.id], function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err.code);
            }
            else {
                res.json(result);
            }
        });
    });
    app.put("/register/updatePassword", function (req, res) {
        db.query(getPass, [req.body.id, req.body.oldpassword], function (err, result) {
            if (err) {
                console.error("Error: " + err);
                res.send(err.code);
            }
            else {
                if (result.rows.length !== 0) {
                    db.query(updatePassword, [req.body.password, false, req.body.id], function (err, result1) {
                        if (err) {
                            console.error("Error: " + err);
                            res.send(err.code);
                        }
                        else {
                            res.json({ "response": true });
                        }
                    });
                }
                else {
                    res.json({ "response": false });
                }
            }
        });
    });
}
exports.register = register;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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ZXJ2aWNlcy9yZWdpc3Rlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgKiBhcyBkYiBmcm9tICcuLi9kYi9wZyc7XG5cbnZhciBjcmVhdGVBZG1pbiA9ICdJTlNFUlQgSU5UTyBhZG1pbmlzdHJhdG9yKGFkbWluX2ZpcnN0X25hbWUsIGFkbWluX2xhc3RfbmFtZSwgYWRtaW5fdXNlcm5hbWUsIGFkbWluX3Bhc3N3b3JkLCBhZG1pbl9lbWFpbCkgVkFMVUVTICgkMSwkMiwkMyxDUllQVCgkNCxHRU5fU0FMVChcXCdiZlxcJykpLCQ1KSc7XG52YXIgZ2V0QWRtaW49ICdTRUxFQ1QgYWRtaW5faWQsIGFkbWluX2VtYWlsLCBhZG1pbl9zdGF0dXMsIGFkbWluX3Bhc3MsIGFkbWluX2ZpcnN0X25hbWUsIGFkbWluX2xhc3RfbmFtZSwgYWRtaW5fdXNlcm5hbWUgRlJPTSBhZG1pbmlzdHJhdG9yIFdIRVJFIGFkbWluX2lkPSQxJztcbnZhciBnZXRBZG1pbnM9ICdTRUxFQ1QgYWRtaW5faWQsIGFkbWluX2VtYWlsLCBhZG1pbl9zdGF0dXMsIGFkbWluX3Bhc3MsIGFkbWluX2ZpcnN0X25hbWUsIGFkbWluX2xhc3RfbmFtZSwgYWRtaW5fdXNlcm5hbWUgRlJPTSBhZG1pbmlzdHJhdG9yJztcbnZhciBnZXRBZG1pbkZyb21Vc2VyPSAnU0VMRUNUIGFkbWluX3N0YXR1cywgYWRtaW5fcGFzcyBGUk9NIGFkbWluaXN0cmF0b3IgV0hFUkUgYWRtaW5fdXNlcm5hbWU9JDEnO1xudmFyIHVwZGF0ZUFkbWluID0gJ1VQREFURSBhZG1pbmlzdHJhdG9yIFNFVCBhZG1pbl9maXJzdF9uYW1lPSQxLCBhZG1pbl9sYXN0X25hbWU9JDIsIGFkbWluX2VtYWlsPSQ0IFdIRVJFIGFkbWluX2lkPSQzJztcbnZhciBzZXRQYXNzd29yZCA9ICdVUERBVEUgYWRtaW5pc3RyYXRvciBTRVQgYWRtaW5fcGFzc3dvcmQ9Q1JZUFQoJDEsR0VOX1NBTFQoXFwnYmZcXCcpKSwgYWRtaW5fcGFzcz0kMiBXSEVSRSBhZG1pbl9pZD0kMyc7XG52YXIgdXBkYXRlUGFzc3dvcmQgPSAnVVBEQVRFIGFkbWluaXN0cmF0b3IgU0VUIGFkbWluX3Bhc3N3b3JkPUNSWVBUKCQxLEdFTl9TQUxUKFxcJ2JmXFwnKSksIGFkbWluX3Bhc3M9JDIgV0hFUkUgYWRtaW5faWQ9JDMnO1xudmFyIGdldFBhc3MgPSAnU0VMRUNUIGFkbWluX2lkIEZST00gYWRtaW5pc3RyYXRvciBXSEVSRSBhZG1pbl9pZD0kMSBBTkQgYWRtaW5fcGFzc3dvcmQ9Q1JZUFQoJDIsYWRtaW5fcGFzc3dvcmQpJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyKGFwcDogZXhwcmVzcy5BcHBsaWNhdGlvbikge1xudmFyIGFkbWluO1xuXG5hcHAuZ2V0KCcvcmVnaXN0ZXIvZ2V0QWRtaW4nLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICByZXMuY29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICBkYi5xdWVyeShnZXRBZG1pbiwgW3JlcS5xdWVyeS5pZF0sIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnIpO1xuICAgICAgICAgICAgcmVzLnNlbmQoZXJyKTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzdWx0LnJvd3NbMF0pO1xuICAgICAgICAgICAgcmVzLmpzb24ocmVzdWx0LnJvd3NbMF0pO1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcblxuYXBwLmdldCgnL3JlZ2lzdGVyL2dldEFkbWluRnJvbVVzZXInLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICByZXMuY29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICBkYi5xdWVyeShnZXRBZG1pbkZyb21Vc2VyLCBbcmVxLnF1ZXJ5LnVzZXJdLCAoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyKTtcbiAgICAgICAgICAgIHJlcy5zZW5kKGVycik7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdC5yb3dzWzBdKTtcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3VsdC5yb3dzWzBdKTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG5cbmFwcC5nZXQoJy9yZWdpc3Rlci9nZXRBZG1pbnMnLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICByZXMuY29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICBkYi5xdWVyeShnZXRBZG1pbnMsIG51bGwsIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnIpO1xuICAgICAgICAgICAgcmVzLnNlbmQoZXJyKTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgcmVzLmpzb24ocmVzdWx0LnJvd3MpO1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcblxuLy9NZXRob2QgdG8gdmFsaWRhdGUgTG9naW4gaW5mbyB3aXRoIGRiXG5hcHAucG9zdChgL3JlZ2lzdGVyYCwgKHJlcTphbnksIHJlczphbnkpID0+IHtcbiAgZGIucXVlcnkoY3JlYXRlQWRtaW4sW3JlcS5ib2R5Lm5hbWUsIHJlcS5ib2R5Lmxhc3QsIHJlcS5ib2R5LnVzZXJuYW1lLCByZXEuYm9keS5wYXNzd29yZCwgcmVxLmJvZHkuZW1haWxdICwoZXJyOmFueSwgcmVzdWx0OmFueSkgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yOiBcIiArIGVyci5jb2RlKTtcbiAgICAgICAgcmVzLnNlbmQoZXJyLmNvZGUpO1xuICAgIH1lbHNlIHtcbiAgICAgICAgcmVzLmpzb24ocmVzdWx0KTtcbiAgICB9XG4gICAgfSk7XG59KTtcblxuYXBwLnB1dChgL3JlZ2lzdGVyL3VwZGF0ZWAsIChyZXE6YW55LCByZXM6YW55KSA9PiB7XG4gICAgZGIucXVlcnkodXBkYXRlQWRtaW4sW3JlcS5ib2R5Lm5hbWUsIHJlcS5ib2R5Lmxhc3QsIHJlcS5ib2R5LmlkLCByZXEuYm9keS5lbWFpbF0gLChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XG4gICAgICAgIGlmIChlcnIpeyBcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnIpO1xuICAgICAgICAgICAgcmVzLnNlbmQoZXJyLmNvZGUpO1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICByZXMuanNvbihyZXN1bHQucm93cyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuXG5hcHAucHV0KGAvcmVnaXN0ZXIvc2V0UGFzc3dvcmRgLCAocmVxOmFueSwgcmVzOmFueSkgPT4ge1xuICAgIGRiLnF1ZXJ5KHNldFBhc3N3b3JkLFtyZXEuYm9keS5wYXNzd29yZCwgZmFsc2UsIHJlcS5ib2R5LmlkXSAsKGVycjphbnksIHJlc3VsdDphbnkpID0+IHtcbiAgICAgICAgaWYgKGVycil7IFxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yOiBcIiArIGVycik7XG4gICAgICAgICAgICByZXMuc2VuZChlcnIuY29kZSk7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuXG5hcHAucHV0KGAvcmVnaXN0ZXIvdXBkYXRlUGFzc3dvcmRgLCAocmVxOmFueSwgcmVzOmFueSkgPT4ge1xuXG4gICAgZGIucXVlcnkoZ2V0UGFzcyxbcmVxLmJvZHkuaWQsIHJlcS5ib2R5Lm9sZHBhc3N3b3JkXSAsKGVycjphbnksIHJlc3VsdDphbnkpID0+IHtcbiAgICAgICAgaWYgKGVycil7IFxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yOiBcIiArIGVycik7IFxuICAgICAgICAgICAgcmVzLnNlbmQoZXJyLmNvZGUpO1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICBpZihyZXN1bHQucm93cy5sZW5ndGggIT09IDApe1xuICAgICAgICAgICAgZGIucXVlcnkodXBkYXRlUGFzc3dvcmQsW3JlcS5ib2R5LnBhc3N3b3JkLCBmYWxzZSwgcmVxLmJvZHkuaWRdICwoZXJyOmFueSwgcmVzdWx0MTphbnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKXsgXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnIpOyBcbiAgICAgICAgICAgICAgICAgICAgcmVzLnNlbmQoZXJyLmNvZGUpO1xuICAgICAgICAgICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLmpzb24oe1wicmVzcG9uc2VcIjp0cnVlfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTt9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHJlcy5qc29uKHtcInJlc3BvbnNlXCI6ZmFsc2V9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbn0pO1xuXG59XG4iXX0=
