"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var db = require("../db/pg");
var createAdmin = 'INSERT INTO administrator(admin_first_name, admin_last_name, admin_username, admin_password) VALUES ($1,$2,$3,$4)';
var getAdmin = 'SELECT * FROM administrator WHERE admin_id=$1';
var updateAdmin = 'UPDATE administrator SET admin_first_name=$1, admin_last_name=$2 WHERE admin_id=$3';
var setPassword = 'UPDATE administrator SET admin_password=$1, admin_pass=$2 WHERE admin_id=$3';
var updatePassword = 'UPDATE administrator SET admin_password=$1, admin_pass=$2 WHERE admin_id=$3 AND admin_password=$4';
function register(app) {
    var admin;
    app.get('/register/getAdmin', function (req, res, next) {
        res.contentType('application/json');
        db.query(getAdmin, [req.query.id], function (err, result) {
            if (err) {
                console.error(err);
                res.send('Error ' + err);
            }
            else {
                res.json(result.rows[0]);
            }
        });
    });
    app.post("/register", function (req, res) {
        db.query(createAdmin, [req.body.name, req.body.last, req.body.username, req.body.password], function (err, result) {
            if (err) {
                console.error(err.code);
                res.send(err.code);
            }
            else {
                res.json(result);
            }
        });
    });
    app.put("/register/update", function (req, res) {
        db.query(updateAdmin, [req.body.name, req.body.last, req.body.id], function (err, result) {
            if (err) {
                console.error(err);
                res.send(err);
                res.send(err.code);
            }
            else {
                res.json(result.rows);
            }
        });
    });
    app.put("/register/setPassword", function (req, res) {
        db.query(setPassword, [req.body.password, false, req.body.id], function (err, result) {
            if (err) {
                console.error(err);
                res.send(err);
                res.send(err.code);
            }
            else {
                res.json(result);
            }
        });
    });
    app.put("/register/updatePassword", function (req, res) {
        db.query(updatePassword, [req.body.password, false, req.body.id, req.body.oldpassword], function (err, result) {
            if (err) {
                console.error(err);
                res.send(err);
                res.send(err.code);
            }
            else {
                res.json(result);
            }
        });
    });
}
exports.register = register;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QixDQUFDO1lBQUEsSUFBSSxDQUFDLENBQUM7Z0JBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNyQixDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUVILENBQUM7QUE1REQsNEJBNERDIiwiZmlsZSI6InNlcnZpY2VzL3JlZ2lzdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCAqIGFzIGRiIGZyb20gJy4uL2RiL3BnJztcblxudmFyIGNyZWF0ZUFkbWluID0gJ0lOU0VSVCBJTlRPIGFkbWluaXN0cmF0b3IoYWRtaW5fZmlyc3RfbmFtZSwgYWRtaW5fbGFzdF9uYW1lLCBhZG1pbl91c2VybmFtZSwgYWRtaW5fcGFzc3dvcmQpIFZBTFVFUyAoJDEsJDIsJDMsJDQpJztcbnZhciBnZXRBZG1pbj0gJ1NFTEVDVCAqIEZST00gYWRtaW5pc3RyYXRvciBXSEVSRSBhZG1pbl9pZD0kMSc7XG52YXIgdXBkYXRlQWRtaW4gPSAnVVBEQVRFIGFkbWluaXN0cmF0b3IgU0VUIGFkbWluX2ZpcnN0X25hbWU9JDEsIGFkbWluX2xhc3RfbmFtZT0kMiBXSEVSRSBhZG1pbl9pZD0kMyc7XG52YXIgc2V0UGFzc3dvcmQgPSAnVVBEQVRFIGFkbWluaXN0cmF0b3IgU0VUIGFkbWluX3Bhc3N3b3JkPSQxLCBhZG1pbl9wYXNzPSQyIFdIRVJFIGFkbWluX2lkPSQzJztcbnZhciB1cGRhdGVQYXNzd29yZCA9ICdVUERBVEUgYWRtaW5pc3RyYXRvciBTRVQgYWRtaW5fcGFzc3dvcmQ9JDEsIGFkbWluX3Bhc3M9JDIgV0hFUkUgYWRtaW5faWQ9JDMgQU5EIGFkbWluX3Bhc3N3b3JkPSQ0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyKGFwcDogZXhwcmVzcy5BcHBsaWNhdGlvbikge1xudmFyIGFkbWluO1xuXG5hcHAuZ2V0KCcvcmVnaXN0ZXIvZ2V0QWRtaW4nLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICByZXMuY29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICBkYi5xdWVyeShnZXRBZG1pbiwgW3JlcS5xdWVyeS5pZF0sIChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJlc3VsdC5zZW5kKCdFcnJvciAnICsgZXJyKTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgcmVzLmpzb24ocmVzdWx0LnJvd3NbMF0pO1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcblxuLy9NZXRob2QgdG8gdmFsaWRhdGUgTG9naW4gaW5mbyB3aXRoIGRiXG5hcHAucG9zdChgL3JlZ2lzdGVyYCwgKHJlcTphbnksIHJlczphbnkpID0+IHtcbiAgZGIucXVlcnkoY3JlYXRlQWRtaW4sW3JlcS5ib2R5Lm5hbWUsIHJlcS5ib2R5Lmxhc3QsIHJlcS5ib2R5LnVzZXJuYW1lLCByZXEuYm9keS5wYXNzd29yZF0gLChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVyci5jb2RlKTtcbiAgICAgICAgcmVzLnNlbmQoZXJyLmNvZGUpO1xuICAgIH1lbHNlIHtcbiAgICAgICAgcmVzLmpzb24ocmVzdWx0KTtcbiAgICB9XG4gICAgfSk7XG59KTtcblxuYXBwLnB1dChgL3JlZ2lzdGVyL3VwZGF0ZWAsIChyZXE6YW55LCByZXM6YW55KSA9PiB7XG4gICAgZGIucXVlcnkodXBkYXRlQWRtaW4sW3JlcS5ib2R5Lm5hbWUsIHJlcS5ib2R5Lmxhc3QsIHJlcS5ib2R5LmlkXSAsKGVycjphbnksIHJlc3VsdDphbnkpID0+IHtcbiAgICAgICAgaWYgKGVycil7IFxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpOyByZXMuc2VuZChlcnIpOyBcbiAgICAgICAgICAgIHJlcy5zZW5kKGVyci5jb2RlKTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgcmVzLmpzb24ocmVzdWx0LnJvd3MpO1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcblxuYXBwLnB1dChgL3JlZ2lzdGVyL3NldFBhc3N3b3JkYCwgKHJlcTphbnksIHJlczphbnkpID0+IHtcbiAgICBkYi5xdWVyeShzZXRQYXNzd29yZCxbcmVxLmJvZHkucGFzc3dvcmQsIGZhbHNlLCByZXEuYm9keS5pZF0gLChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XG4gICAgICAgIGlmIChlcnIpeyBcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTsgcmVzLnNlbmQoZXJyKTsgXG4gICAgICAgICAgICByZXMuc2VuZChlcnIuY29kZSk7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuXG5hcHAucHV0KGAvcmVnaXN0ZXIvdXBkYXRlUGFzc3dvcmRgLCAocmVxOmFueSwgcmVzOmFueSkgPT4ge1xuICAgIGRiLnF1ZXJ5KHVwZGF0ZVBhc3N3b3JkLFtyZXEuYm9keS5wYXNzd29yZCwgZmFsc2UsIHJlcS5ib2R5LmlkLCByZXEuYm9keS5vbGRwYXNzd29yZF0gLChlcnI6YW55LCByZXN1bHQ6YW55KSA9PiB7XG4gICAgICAgIGlmIChlcnIpeyBcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTsgcmVzLnNlbmQoZXJyKTsgXG4gICAgICAgICAgICByZXMuc2VuZChlcnIuY29kZSk7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuXG59XG4iXX0=
